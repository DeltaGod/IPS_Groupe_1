
STM32_tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a80  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003c18  08003c18  00004c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c30  08003c30  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003c30  08003c30  00004c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c38  08003c38  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c38  08003c38  00004c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c3c  08003c3c  00004c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003c40  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  08003c4c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08003c4c  00005104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db19  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dc9  00000000  00000000  00012b55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  00014920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a4a  00000000  00000000  00015638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016bed  00000000  00000000  00016082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e393  00000000  00000000  0002cc6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000965b9  00000000  00000000  0003b002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d15bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003798  00000000  00000000  000d1600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000d4d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003c00 	.word	0x08003c00

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08003c00 	.word	0x08003c00

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000508:	f000 fb56 	bl	8000bb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050c:	f000 f810 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000510:	f000 f968 	bl	80007e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000514:	f000 f93c 	bl	8000790 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000518:	f000 f872 	bl	8000600 <MX_ADC1_Init>
  MX_TIM2_Init();
 800051c:	f000 f8c2 	bl	80006a4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000520:	2100      	movs	r1, #0
 8000522:	4802      	ldr	r0, [pc, #8]	@ (800052c <main+0x28>)
 8000524:	f001 fe94 	bl	8002250 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000528:	bf00      	nop
 800052a:	e7fd      	b.n	8000528 <main+0x24>
 800052c:	20000070 	.word	0x20000070

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b094      	sub	sp, #80	@ 0x50
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0320 	add.w	r3, r7, #32
 800053a:	2230      	movs	r2, #48	@ 0x30
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f003 fb32 	bl	8003ba8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	4b27      	ldr	r3, [pc, #156]	@ (80005f8 <SystemClock_Config+0xc8>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800055c:	4a26      	ldr	r2, [pc, #152]	@ (80005f8 <SystemClock_Config+0xc8>)
 800055e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000562:	6413      	str	r3, [r2, #64]	@ 0x40
 8000564:	4b24      	ldr	r3, [pc, #144]	@ (80005f8 <SystemClock_Config+0xc8>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000568:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000570:	2300      	movs	r3, #0
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	4b21      	ldr	r3, [pc, #132]	@ (80005fc <SystemClock_Config+0xcc>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a20      	ldr	r2, [pc, #128]	@ (80005fc <SystemClock_Config+0xcc>)
 800057a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	4b1e      	ldr	r3, [pc, #120]	@ (80005fc <SystemClock_Config+0xcc>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800058c:	2301      	movs	r3, #1
 800058e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000590:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000594:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	2302      	movs	r3, #2
 8000598:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800059e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005a0:	2308      	movs	r3, #8
 80005a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 80005a4:	23c8      	movs	r3, #200	@ 0xc8
 80005a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a8:	2302      	movs	r3, #2
 80005aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005ac:	2304      	movs	r3, #4
 80005ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b0:	f107 0320 	add.w	r3, r7, #32
 80005b4:	4618      	mov	r0, r3
 80005b6:	f001 f90b 	bl	80017d0 <HAL_RCC_OscConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005c0:	f000 f96a 	bl	8000898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c4:	230f      	movs	r3, #15
 80005c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c8:	2302      	movs	r3, #2
 80005ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005da:	f107 030c 	add.w	r3, r7, #12
 80005de:	2103      	movs	r1, #3
 80005e0:	4618      	mov	r0, r3
 80005e2:	f001 fb6d 	bl	8001cc0 <HAL_RCC_ClockConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005ec:	f000 f954 	bl	8000898 <Error_Handler>
  }
}
 80005f0:	bf00      	nop
 80005f2:	3750      	adds	r7, #80	@ 0x50
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40007000 	.word	0x40007000

08000600 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000606:	463b      	mov	r3, r7
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000612:	4b21      	ldr	r3, [pc, #132]	@ (8000698 <MX_ADC1_Init+0x98>)
 8000614:	4a21      	ldr	r2, [pc, #132]	@ (800069c <MX_ADC1_Init+0x9c>)
 8000616:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000618:	4b1f      	ldr	r3, [pc, #124]	@ (8000698 <MX_ADC1_Init+0x98>)
 800061a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800061e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000620:	4b1d      	ldr	r3, [pc, #116]	@ (8000698 <MX_ADC1_Init+0x98>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000626:	4b1c      	ldr	r3, [pc, #112]	@ (8000698 <MX_ADC1_Init+0x98>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800062c:	4b1a      	ldr	r3, [pc, #104]	@ (8000698 <MX_ADC1_Init+0x98>)
 800062e:	2200      	movs	r2, #0
 8000630:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000632:	4b19      	ldr	r3, [pc, #100]	@ (8000698 <MX_ADC1_Init+0x98>)
 8000634:	2200      	movs	r2, #0
 8000636:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800063a:	4b17      	ldr	r3, [pc, #92]	@ (8000698 <MX_ADC1_Init+0x98>)
 800063c:	2200      	movs	r2, #0
 800063e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b15      	ldr	r3, [pc, #84]	@ (8000698 <MX_ADC1_Init+0x98>)
 8000642:	4a17      	ldr	r2, [pc, #92]	@ (80006a0 <MX_ADC1_Init+0xa0>)
 8000644:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000646:	4b14      	ldr	r3, [pc, #80]	@ (8000698 <MX_ADC1_Init+0x98>)
 8000648:	2200      	movs	r2, #0
 800064a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800064c:	4b12      	ldr	r3, [pc, #72]	@ (8000698 <MX_ADC1_Init+0x98>)
 800064e:	2201      	movs	r2, #1
 8000650:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000652:	4b11      	ldr	r3, [pc, #68]	@ (8000698 <MX_ADC1_Init+0x98>)
 8000654:	2200      	movs	r2, #0
 8000656:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800065a:	4b0f      	ldr	r3, [pc, #60]	@ (8000698 <MX_ADC1_Init+0x98>)
 800065c:	2201      	movs	r2, #1
 800065e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000660:	480d      	ldr	r0, [pc, #52]	@ (8000698 <MX_ADC1_Init+0x98>)
 8000662:	f000 fb1b 	bl	8000c9c <HAL_ADC_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800066c:	f000 f914 	bl	8000898 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000670:	230a      	movs	r3, #10
 8000672:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000674:	2301      	movs	r3, #1
 8000676:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000678:	2300      	movs	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800067c:	463b      	mov	r3, r7
 800067e:	4619      	mov	r1, r3
 8000680:	4805      	ldr	r0, [pc, #20]	@ (8000698 <MX_ADC1_Init+0x98>)
 8000682:	f000 fb4f 	bl	8000d24 <HAL_ADC_ConfigChannel>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800068c:	f000 f904 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000690:	bf00      	nop
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000028 	.word	0x20000028
 800069c:	40012000 	.word	0x40012000
 80006a0:	0f000001 	.word	0x0f000001

080006a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08e      	sub	sp, #56	@ 0x38
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006b8:	f107 0320 	add.w	r3, r7, #32
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]
 80006d0:	615a      	str	r2, [r3, #20]
 80006d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006d4:	4b2d      	ldr	r3, [pc, #180]	@ (800078c <MX_TIM2_Init+0xe8>)
 80006d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 49999;
 80006dc:	4b2b      	ldr	r3, [pc, #172]	@ (800078c <MX_TIM2_Init+0xe8>)
 80006de:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80006e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e4:	4b29      	ldr	r3, [pc, #164]	@ (800078c <MX_TIM2_Init+0xe8>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80006ea:	4b28      	ldr	r3, [pc, #160]	@ (800078c <MX_TIM2_Init+0xe8>)
 80006ec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f2:	4b26      	ldr	r3, [pc, #152]	@ (800078c <MX_TIM2_Init+0xe8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f8:	4b24      	ldr	r3, [pc, #144]	@ (800078c <MX_TIM2_Init+0xe8>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006fe:	4823      	ldr	r0, [pc, #140]	@ (800078c <MX_TIM2_Init+0xe8>)
 8000700:	f001 fcfe 	bl	8002100 <HAL_TIM_Base_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800070a:	f000 f8c5 	bl	8000898 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800070e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000712:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000714:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000718:	4619      	mov	r1, r3
 800071a:	481c      	ldr	r0, [pc, #112]	@ (800078c <MX_TIM2_Init+0xe8>)
 800071c:	f001 ff0a 	bl	8002534 <HAL_TIM_ConfigClockSource>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000726:	f000 f8b7 	bl	8000898 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800072a:	4818      	ldr	r0, [pc, #96]	@ (800078c <MX_TIM2_Init+0xe8>)
 800072c:	f001 fd37 	bl	800219e <HAL_TIM_PWM_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000736:	f000 f8af 	bl	8000898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800073a:	2300      	movs	r3, #0
 800073c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800073e:	2300      	movs	r3, #0
 8000740:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000742:	f107 0320 	add.w	r3, r7, #32
 8000746:	4619      	mov	r1, r3
 8000748:	4810      	ldr	r0, [pc, #64]	@ (800078c <MX_TIM2_Init+0xe8>)
 800074a:	f002 fa8d 	bl	8002c68 <HAL_TIMEx_MasterConfigSynchronization>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000754:	f000 f8a0 	bl	8000898 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000758:	2360      	movs	r3, #96	@ 0x60
 800075a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 800075c:	2364      	movs	r3, #100	@ 0x64
 800075e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000760:	2300      	movs	r3, #0
 8000762:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	2200      	movs	r2, #0
 800076c:	4619      	mov	r1, r3
 800076e:	4807      	ldr	r0, [pc, #28]	@ (800078c <MX_TIM2_Init+0xe8>)
 8000770:	f001 fe1e 	bl	80023b0 <HAL_TIM_PWM_ConfigChannel>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800077a:	f000 f88d 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800077e:	4803      	ldr	r0, [pc, #12]	@ (800078c <MX_TIM2_Init+0xe8>)
 8000780:	f000 f91c 	bl	80009bc <HAL_TIM_MspPostInit>

}
 8000784:	bf00      	nop
 8000786:	3738      	adds	r7, #56	@ 0x38
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000070 	.word	0x20000070

08000790 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000794:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 8000796:	4a12      	ldr	r2, [pc, #72]	@ (80007e0 <MX_USART2_UART_Init+0x50>)
 8000798:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800079a:	4b10      	ldr	r3, [pc, #64]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 800079c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b4:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 80007b6:	220c      	movs	r2, #12
 80007b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ba:	4b08      	ldr	r3, [pc, #32]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007c6:	4805      	ldr	r0, [pc, #20]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 80007c8:	f002 fabc 	bl	8002d44 <HAL_UART_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007d2:	f000 f861 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200000b8 	.word	0x200000b8
 80007e0:	40004400 	.word	0x40004400

080007e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08a      	sub	sp, #40	@ 0x28
 80007e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
 80007fe:	4b24      	ldr	r3, [pc, #144]	@ (8000890 <MX_GPIO_Init+0xac>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a23      	ldr	r2, [pc, #140]	@ (8000890 <MX_GPIO_Init+0xac>)
 8000804:	f043 0304 	orr.w	r3, r3, #4
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
 800080a:	4b21      	ldr	r3, [pc, #132]	@ (8000890 <MX_GPIO_Init+0xac>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	f003 0304 	and.w	r3, r3, #4
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	4b1d      	ldr	r3, [pc, #116]	@ (8000890 <MX_GPIO_Init+0xac>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	4a1c      	ldr	r2, [pc, #112]	@ (8000890 <MX_GPIO_Init+0xac>)
 8000820:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000824:	6313      	str	r3, [r2, #48]	@ 0x30
 8000826:	4b1a      	ldr	r3, [pc, #104]	@ (8000890 <MX_GPIO_Init+0xac>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	4b16      	ldr	r3, [pc, #88]	@ (8000890 <MX_GPIO_Init+0xac>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a15      	ldr	r2, [pc, #84]	@ (8000890 <MX_GPIO_Init+0xac>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b13      	ldr	r3, [pc, #76]	@ (8000890 <MX_GPIO_Init+0xac>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	4b0f      	ldr	r3, [pc, #60]	@ (8000890 <MX_GPIO_Init+0xac>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a0e      	ldr	r2, [pc, #56]	@ (8000890 <MX_GPIO_Init+0xac>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b0c      	ldr	r3, [pc, #48]	@ (8000890 <MX_GPIO_Init+0xac>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800086a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800086e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000870:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000874:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	4619      	mov	r1, r3
 8000880:	4804      	ldr	r0, [pc, #16]	@ (8000894 <MX_GPIO_Init+0xb0>)
 8000882:	f000 fe21 	bl	80014c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000886:	bf00      	nop
 8000888:	3728      	adds	r7, #40	@ 0x28
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40023800 	.word	0x40023800
 8000894:	40020800 	.word	0x40020800

08000898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800089c:	b672      	cpsid	i
}
 800089e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <Error_Handler+0x8>

080008a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	4b10      	ldr	r3, [pc, #64]	@ (80008f0 <HAL_MspInit+0x4c>)
 80008b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008b2:	4a0f      	ldr	r2, [pc, #60]	@ (80008f0 <HAL_MspInit+0x4c>)
 80008b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80008ba:	4b0d      	ldr	r3, [pc, #52]	@ (80008f0 <HAL_MspInit+0x4c>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	603b      	str	r3, [r7, #0]
 80008ca:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <HAL_MspInit+0x4c>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ce:	4a08      	ldr	r2, [pc, #32]	@ (80008f0 <HAL_MspInit+0x4c>)
 80008d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008d6:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <HAL_MspInit+0x4c>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008e2:	2007      	movs	r0, #7
 80008e4:	f000 fd1c 	bl	8001320 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40023800 	.word	0x40023800

080008f4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08a      	sub	sp, #40	@ 0x28
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a17      	ldr	r2, [pc, #92]	@ (8000970 <HAL_ADC_MspInit+0x7c>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d127      	bne.n	8000966 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	613b      	str	r3, [r7, #16]
 800091a:	4b16      	ldr	r3, [pc, #88]	@ (8000974 <HAL_ADC_MspInit+0x80>)
 800091c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800091e:	4a15      	ldr	r2, [pc, #84]	@ (8000974 <HAL_ADC_MspInit+0x80>)
 8000920:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000924:	6453      	str	r3, [r2, #68]	@ 0x44
 8000926:	4b13      	ldr	r3, [pc, #76]	@ (8000974 <HAL_ADC_MspInit+0x80>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800092a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	4b0f      	ldr	r3, [pc, #60]	@ (8000974 <HAL_ADC_MspInit+0x80>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	4a0e      	ldr	r2, [pc, #56]	@ (8000974 <HAL_ADC_MspInit+0x80>)
 800093c:	f043 0304 	orr.w	r3, r3, #4
 8000940:	6313      	str	r3, [r2, #48]	@ 0x30
 8000942:	4b0c      	ldr	r3, [pc, #48]	@ (8000974 <HAL_ADC_MspInit+0x80>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	f003 0304 	and.w	r3, r3, #4
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = A5_Pin;
 800094e:	2301      	movs	r3, #1
 8000950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000952:	2303      	movs	r3, #3
 8000954:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(A5_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	4619      	mov	r1, r3
 8000960:	4805      	ldr	r0, [pc, #20]	@ (8000978 <HAL_ADC_MspInit+0x84>)
 8000962:	f000 fdb1 	bl	80014c8 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000966:	bf00      	nop
 8000968:	3728      	adds	r7, #40	@ 0x28
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40012000 	.word	0x40012000
 8000974:	40023800 	.word	0x40023800
 8000978:	40020800 	.word	0x40020800

0800097c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800097c:	b480      	push	{r7}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800098c:	d10d      	bne.n	80009aa <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	4b09      	ldr	r3, [pc, #36]	@ (80009b8 <HAL_TIM_Base_MspInit+0x3c>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000996:	4a08      	ldr	r2, [pc, #32]	@ (80009b8 <HAL_TIM_Base_MspInit+0x3c>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6413      	str	r3, [r2, #64]	@ 0x40
 800099e:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <HAL_TIM_Base_MspInit+0x3c>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80009aa:	bf00      	nop
 80009ac:	3714      	adds	r7, #20
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	40023800 	.word	0x40023800

080009bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b088      	sub	sp, #32
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 030c 	add.w	r3, r7, #12
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80009dc:	d11d      	bne.n	8000a1a <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	4b10      	ldr	r3, [pc, #64]	@ (8000a24 <HAL_TIM_MspPostInit+0x68>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	4a0f      	ldr	r2, [pc, #60]	@ (8000a24 <HAL_TIM_MspPostInit+0x68>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000a24 <HAL_TIM_MspPostInit+0x68>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80009fa:	2320      	movs	r3, #32
 80009fc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	2302      	movs	r3, #2
 8000a00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0e:	f107 030c 	add.w	r3, r7, #12
 8000a12:	4619      	mov	r1, r3
 8000a14:	4804      	ldr	r0, [pc, #16]	@ (8000a28 <HAL_TIM_MspPostInit+0x6c>)
 8000a16:	f000 fd57 	bl	80014c8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000a1a:	bf00      	nop
 8000a1c:	3720      	adds	r7, #32
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40020000 	.word	0x40020000

08000a2c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08a      	sub	sp, #40	@ 0x28
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a1d      	ldr	r2, [pc, #116]	@ (8000ac0 <HAL_UART_MspInit+0x94>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d133      	bne.n	8000ab6 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac4 <HAL_UART_MspInit+0x98>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a56:	4a1b      	ldr	r2, [pc, #108]	@ (8000ac4 <HAL_UART_MspInit+0x98>)
 8000a58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a5e:	4b19      	ldr	r3, [pc, #100]	@ (8000ac4 <HAL_UART_MspInit+0x98>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	4b15      	ldr	r3, [pc, #84]	@ (8000ac4 <HAL_UART_MspInit+0x98>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	4a14      	ldr	r2, [pc, #80]	@ (8000ac4 <HAL_UART_MspInit+0x98>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7a:	4b12      	ldr	r3, [pc, #72]	@ (8000ac4 <HAL_UART_MspInit+0x98>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a86:	230c      	movs	r3, #12
 8000a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a92:	2303      	movs	r3, #3
 8000a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a96:	2307      	movs	r3, #7
 8000a98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4809      	ldr	r0, [pc, #36]	@ (8000ac8 <HAL_UART_MspInit+0x9c>)
 8000aa2:	f000 fd11 	bl	80014c8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	2026      	movs	r0, #38	@ 0x26
 8000aac:	f000 fc43 	bl	8001336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ab0:	2026      	movs	r0, #38	@ 0x26
 8000ab2:	f000 fc5c 	bl	800136e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ab6:	bf00      	nop
 8000ab8:	3728      	adds	r7, #40	@ 0x28
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40004400 	.word	0x40004400
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40020000 	.word	0x40020000

08000acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <NMI_Handler+0x4>

08000ad4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <HardFault_Handler+0x4>

08000adc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <MemManage_Handler+0x4>

08000ae4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <BusFault_Handler+0x4>

08000aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <UsageFault_Handler+0x4>

08000af4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b22:	f000 f89b 	bl	8000c5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b30:	4802      	ldr	r0, [pc, #8]	@ (8000b3c <USART2_IRQHandler+0x10>)
 8000b32:	f002 f957 	bl	8002de4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	200000b8 	.word	0x200000b8

08000b40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b44:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <SystemInit+0x20>)
 8000b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b4a:	4a05      	ldr	r2, [pc, #20]	@ (8000b60 <SystemInit+0x20>)
 8000b4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b9c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b68:	f7ff ffea 	bl	8000b40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b6c:	480c      	ldr	r0, [pc, #48]	@ (8000ba0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b6e:	490d      	ldr	r1, [pc, #52]	@ (8000ba4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b70:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b74:	e002      	b.n	8000b7c <LoopCopyDataInit>

08000b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7a:	3304      	adds	r3, #4

08000b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b80:	d3f9      	bcc.n	8000b76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b82:	4a0a      	ldr	r2, [pc, #40]	@ (8000bac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b84:	4c0a      	ldr	r4, [pc, #40]	@ (8000bb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b88:	e001      	b.n	8000b8e <LoopFillZerobss>

08000b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b8c:	3204      	adds	r2, #4

08000b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b90:	d3fb      	bcc.n	8000b8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b92:	f003 f811 	bl	8003bb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b96:	f7ff fcb5 	bl	8000504 <main>
  bx  lr    
 8000b9a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ba8:	08003c40 	.word	0x08003c40
  ldr r2, =_sbss
 8000bac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bb0:	20000104 	.word	0x20000104

08000bb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bb4:	e7fe      	b.n	8000bb4 <ADC_IRQHandler>
	...

08000bb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf8 <HAL_Init+0x40>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000bf8 <HAL_Init+0x40>)
 8000bc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf8 <HAL_Init+0x40>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf8 <HAL_Init+0x40>)
 8000bce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd4:	4b08      	ldr	r3, [pc, #32]	@ (8000bf8 <HAL_Init+0x40>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a07      	ldr	r2, [pc, #28]	@ (8000bf8 <HAL_Init+0x40>)
 8000bda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be0:	2003      	movs	r0, #3
 8000be2:	f000 fb9d 	bl	8001320 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000be6:	2000      	movs	r0, #0
 8000be8:	f000 f808 	bl	8000bfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bec:	f7ff fe5a 	bl	80008a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40023c00 	.word	0x40023c00

08000bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c04:	4b12      	ldr	r3, [pc, #72]	@ (8000c50 <HAL_InitTick+0x54>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	4b12      	ldr	r3, [pc, #72]	@ (8000c54 <HAL_InitTick+0x58>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 fbb5 	bl	800138a <HAL_SYSTICK_Config>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e00e      	b.n	8000c48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2b0f      	cmp	r3, #15
 8000c2e:	d80a      	bhi.n	8000c46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c30:	2200      	movs	r2, #0
 8000c32:	6879      	ldr	r1, [r7, #4]
 8000c34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c38:	f000 fb7d 	bl	8001336 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c3c:	4a06      	ldr	r2, [pc, #24]	@ (8000c58 <HAL_InitTick+0x5c>)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c42:	2300      	movs	r3, #0
 8000c44:	e000      	b.n	8000c48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000000 	.word	0x20000000
 8000c54:	20000008 	.word	0x20000008
 8000c58:	20000004 	.word	0x20000004

08000c5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c60:	4b06      	ldr	r3, [pc, #24]	@ (8000c7c <HAL_IncTick+0x20>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	461a      	mov	r2, r3
 8000c66:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <HAL_IncTick+0x24>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	4a04      	ldr	r2, [pc, #16]	@ (8000c80 <HAL_IncTick+0x24>)
 8000c6e:	6013      	str	r3, [r2, #0]
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	20000008 	.word	0x20000008
 8000c80:	20000100 	.word	0x20000100

08000c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  return uwTick;
 8000c88:	4b03      	ldr	r3, [pc, #12]	@ (8000c98 <HAL_GetTick+0x14>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	20000100 	.word	0x20000100

08000c9c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d101      	bne.n	8000cb2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e033      	b.n	8000d1a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d109      	bne.n	8000cce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f7ff fe1a 	bl	80008f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd2:	f003 0310 	and.w	r3, r3, #16
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d118      	bne.n	8000d0c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cde:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000ce2:	f023 0302 	bic.w	r3, r3, #2
 8000ce6:	f043 0202 	orr.w	r2, r3, #2
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f000 f94a 	bl	8000f88 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfe:	f023 0303 	bic.w	r3, r3, #3
 8000d02:	f043 0201 	orr.w	r2, r3, #1
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d0a:	e001      	b.n	8000d10 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2200      	movs	r2, #0
 8000d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
	...

08000d24 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d101      	bne.n	8000d40 <HAL_ADC_ConfigChannel+0x1c>
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	e113      	b.n	8000f68 <HAL_ADC_ConfigChannel+0x244>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2201      	movs	r2, #1
 8000d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b09      	cmp	r3, #9
 8000d4e:	d925      	bls.n	8000d9c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	68d9      	ldr	r1, [r3, #12]
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4613      	mov	r3, r2
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	4413      	add	r3, r2
 8000d64:	3b1e      	subs	r3, #30
 8000d66:	2207      	movs	r2, #7
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43da      	mvns	r2, r3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	400a      	ands	r2, r1
 8000d74:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	68d9      	ldr	r1, [r3, #12]
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	689a      	ldr	r2, [r3, #8]
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	4618      	mov	r0, r3
 8000d88:	4603      	mov	r3, r0
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	4403      	add	r3, r0
 8000d8e:	3b1e      	subs	r3, #30
 8000d90:	409a      	lsls	r2, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	430a      	orrs	r2, r1
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	e022      	b.n	8000de2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	6919      	ldr	r1, [r3, #16]
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	461a      	mov	r2, r3
 8000daa:	4613      	mov	r3, r2
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	4413      	add	r3, r2
 8000db0:	2207      	movs	r2, #7
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43da      	mvns	r2, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	400a      	ands	r2, r1
 8000dbe:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	6919      	ldr	r1, [r3, #16]
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	689a      	ldr	r2, [r3, #8]
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	4403      	add	r3, r0
 8000dd8:	409a      	lsls	r2, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	430a      	orrs	r2, r1
 8000de0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	2b06      	cmp	r3, #6
 8000de8:	d824      	bhi.n	8000e34 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685a      	ldr	r2, [r3, #4]
 8000df4:	4613      	mov	r3, r2
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	4413      	add	r3, r2
 8000dfa:	3b05      	subs	r3, #5
 8000dfc:	221f      	movs	r2, #31
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43da      	mvns	r2, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	400a      	ands	r2, r1
 8000e0a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	4618      	mov	r0, r3
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685a      	ldr	r2, [r3, #4]
 8000e1e:	4613      	mov	r3, r2
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	4413      	add	r3, r2
 8000e24:	3b05      	subs	r3, #5
 8000e26:	fa00 f203 	lsl.w	r2, r0, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	430a      	orrs	r2, r1
 8000e30:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e32:	e04c      	b.n	8000ece <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	2b0c      	cmp	r3, #12
 8000e3a:	d824      	bhi.n	8000e86 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685a      	ldr	r2, [r3, #4]
 8000e46:	4613      	mov	r3, r2
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	4413      	add	r3, r2
 8000e4c:	3b23      	subs	r3, #35	@ 0x23
 8000e4e:	221f      	movs	r2, #31
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43da      	mvns	r2, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	400a      	ands	r2, r1
 8000e5c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	b29b      	uxth	r3, r3
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685a      	ldr	r2, [r3, #4]
 8000e70:	4613      	mov	r3, r2
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	4413      	add	r3, r2
 8000e76:	3b23      	subs	r3, #35	@ 0x23
 8000e78:	fa00 f203 	lsl.w	r2, r0, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	430a      	orrs	r2, r1
 8000e82:	631a      	str	r2, [r3, #48]	@ 0x30
 8000e84:	e023      	b.n	8000ece <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685a      	ldr	r2, [r3, #4]
 8000e90:	4613      	mov	r3, r2
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	4413      	add	r3, r2
 8000e96:	3b41      	subs	r3, #65	@ 0x41
 8000e98:	221f      	movs	r2, #31
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43da      	mvns	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	400a      	ands	r2, r1
 8000ea6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685a      	ldr	r2, [r3, #4]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	4413      	add	r3, r2
 8000ec0:	3b41      	subs	r3, #65	@ 0x41
 8000ec2:	fa00 f203 	lsl.w	r2, r0, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	430a      	orrs	r2, r1
 8000ecc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ece:	4b29      	ldr	r3, [pc, #164]	@ (8000f74 <HAL_ADC_ConfigChannel+0x250>)
 8000ed0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a28      	ldr	r2, [pc, #160]	@ (8000f78 <HAL_ADC_ConfigChannel+0x254>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d10f      	bne.n	8000efc <HAL_ADC_ConfigChannel+0x1d8>
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b12      	cmp	r3, #18
 8000ee2:	d10b      	bne.n	8000efc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a1d      	ldr	r2, [pc, #116]	@ (8000f78 <HAL_ADC_ConfigChannel+0x254>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d12b      	bne.n	8000f5e <HAL_ADC_ConfigChannel+0x23a>
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000f7c <HAL_ADC_ConfigChannel+0x258>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d003      	beq.n	8000f18 <HAL_ADC_ConfigChannel+0x1f4>
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b11      	cmp	r3, #17
 8000f16:	d122      	bne.n	8000f5e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a11      	ldr	r2, [pc, #68]	@ (8000f7c <HAL_ADC_ConfigChannel+0x258>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d111      	bne.n	8000f5e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f3a:	4b11      	ldr	r3, [pc, #68]	@ (8000f80 <HAL_ADC_ConfigChannel+0x25c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a11      	ldr	r2, [pc, #68]	@ (8000f84 <HAL_ADC_ConfigChannel+0x260>)
 8000f40:	fba2 2303 	umull	r2, r3, r2, r3
 8000f44:	0c9a      	lsrs	r2, r3, #18
 8000f46:	4613      	mov	r3, r2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	4413      	add	r3, r2
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8000f50:	e002      	b.n	8000f58 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	3b01      	subs	r3, #1
 8000f56:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d1f9      	bne.n	8000f52 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2200      	movs	r2, #0
 8000f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8000f66:	2300      	movs	r3, #0
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	40012300 	.word	0x40012300
 8000f78:	40012000 	.word	0x40012000
 8000f7c:	10000012 	.word	0x10000012
 8000f80:	20000000 	.word	0x20000000
 8000f84:	431bde83 	.word	0x431bde83

08000f88 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f90:	4b79      	ldr	r3, [pc, #484]	@ (8001178 <ADC_Init+0x1f0>)
 8000f92:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	685a      	ldr	r2, [r3, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	431a      	orrs	r2, r3
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	685a      	ldr	r2, [r3, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000fbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	6859      	ldr	r1, [r3, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	691b      	ldr	r3, [r3, #16]
 8000fc8:	021a      	lsls	r2, r3, #8
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	685a      	ldr	r2, [r3, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8000fe0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	6859      	ldr	r1, [r3, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	689a      	ldr	r2, [r3, #8]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	430a      	orrs	r2, r1
 8000ff2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	689a      	ldr	r2, [r3, #8]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001002:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	6899      	ldr	r1, [r3, #8]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	68da      	ldr	r2, [r3, #12]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	430a      	orrs	r2, r1
 8001014:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800101a:	4a58      	ldr	r2, [pc, #352]	@ (800117c <ADC_Init+0x1f4>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d022      	beq.n	8001066 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	689a      	ldr	r2, [r3, #8]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800102e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	6899      	ldr	r1, [r3, #8]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	430a      	orrs	r2, r1
 8001040:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	689a      	ldr	r2, [r3, #8]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001050:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	6899      	ldr	r1, [r3, #8]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	430a      	orrs	r2, r1
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	e00f      	b.n	8001086 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	689a      	ldr	r2, [r3, #8]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001074:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	689a      	ldr	r2, [r3, #8]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001084:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	689a      	ldr	r2, [r3, #8]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f022 0202 	bic.w	r2, r2, #2
 8001094:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	6899      	ldr	r1, [r3, #8]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	7e1b      	ldrb	r3, [r3, #24]
 80010a0:	005a      	lsls	r2, r3, #1
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	430a      	orrs	r2, r1
 80010a8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d01b      	beq.n	80010ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	685a      	ldr	r2, [r3, #4]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80010c2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	685a      	ldr	r2, [r3, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80010d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	6859      	ldr	r1, [r3, #4]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010de:	3b01      	subs	r3, #1
 80010e0:	035a      	lsls	r2, r3, #13
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	430a      	orrs	r2, r1
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	e007      	b.n	80010fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	685a      	ldr	r2, [r3, #4]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80010fa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800110a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	3b01      	subs	r3, #1
 8001118:	051a      	lsls	r2, r3, #20
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	430a      	orrs	r2, r1
 8001120:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	689a      	ldr	r2, [r3, #8]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001130:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	6899      	ldr	r1, [r3, #8]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800113e:	025a      	lsls	r2, r3, #9
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	430a      	orrs	r2, r1
 8001146:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	689a      	ldr	r2, [r3, #8]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001156:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	6899      	ldr	r1, [r3, #8]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	029a      	lsls	r2, r3, #10
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	430a      	orrs	r2, r1
 800116a:	609a      	str	r2, [r3, #8]
}
 800116c:	bf00      	nop
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	40012300 	.word	0x40012300
 800117c:	0f000001 	.word	0x0f000001

08001180 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001190:	4b0c      	ldr	r3, [pc, #48]	@ (80011c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800119c:	4013      	ands	r3, r2
 800119e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b2:	4a04      	ldr	r2, [pc, #16]	@ (80011c4 <__NVIC_SetPriorityGrouping+0x44>)
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	60d3      	str	r3, [r2, #12]
}
 80011b8:	bf00      	nop
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011cc:	4b04      	ldr	r3, [pc, #16]	@ (80011e0 <__NVIC_GetPriorityGrouping+0x18>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	0a1b      	lsrs	r3, r3, #8
 80011d2:	f003 0307 	and.w	r3, r3, #7
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	db0b      	blt.n	800120e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	f003 021f 	and.w	r2, r3, #31
 80011fc:	4907      	ldr	r1, [pc, #28]	@ (800121c <__NVIC_EnableIRQ+0x38>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	095b      	lsrs	r3, r3, #5
 8001204:	2001      	movs	r0, #1
 8001206:	fa00 f202 	lsl.w	r2, r0, r2
 800120a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	e000e100 	.word	0xe000e100

08001220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	6039      	str	r1, [r7, #0]
 800122a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800122c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001230:	2b00      	cmp	r3, #0
 8001232:	db0a      	blt.n	800124a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	b2da      	uxtb	r2, r3
 8001238:	490c      	ldr	r1, [pc, #48]	@ (800126c <__NVIC_SetPriority+0x4c>)
 800123a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123e:	0112      	lsls	r2, r2, #4
 8001240:	b2d2      	uxtb	r2, r2
 8001242:	440b      	add	r3, r1
 8001244:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001248:	e00a      	b.n	8001260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	b2da      	uxtb	r2, r3
 800124e:	4908      	ldr	r1, [pc, #32]	@ (8001270 <__NVIC_SetPriority+0x50>)
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	f003 030f 	and.w	r3, r3, #15
 8001256:	3b04      	subs	r3, #4
 8001258:	0112      	lsls	r2, r2, #4
 800125a:	b2d2      	uxtb	r2, r2
 800125c:	440b      	add	r3, r1
 800125e:	761a      	strb	r2, [r3, #24]
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	e000e100 	.word	0xe000e100
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001274:	b480      	push	{r7}
 8001276:	b089      	sub	sp, #36	@ 0x24
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	f1c3 0307 	rsb	r3, r3, #7
 800128e:	2b04      	cmp	r3, #4
 8001290:	bf28      	it	cs
 8001292:	2304      	movcs	r3, #4
 8001294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	3304      	adds	r3, #4
 800129a:	2b06      	cmp	r3, #6
 800129c:	d902      	bls.n	80012a4 <NVIC_EncodePriority+0x30>
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3b03      	subs	r3, #3
 80012a2:	e000      	b.n	80012a6 <NVIC_EncodePriority+0x32>
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43da      	mvns	r2, r3
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	401a      	ands	r2, r3
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012bc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	fa01 f303 	lsl.w	r3, r1, r3
 80012c6:	43d9      	mvns	r1, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012cc:	4313      	orrs	r3, r2
         );
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3724      	adds	r7, #36	@ 0x24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
	...

080012dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012ec:	d301      	bcc.n	80012f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ee:	2301      	movs	r3, #1
 80012f0:	e00f      	b.n	8001312 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012f2:	4a0a      	ldr	r2, [pc, #40]	@ (800131c <SysTick_Config+0x40>)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012fa:	210f      	movs	r1, #15
 80012fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001300:	f7ff ff8e 	bl	8001220 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001304:	4b05      	ldr	r3, [pc, #20]	@ (800131c <SysTick_Config+0x40>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800130a:	4b04      	ldr	r3, [pc, #16]	@ (800131c <SysTick_Config+0x40>)
 800130c:	2207      	movs	r2, #7
 800130e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	e000e010 	.word	0xe000e010

08001320 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff ff29 	bl	8001180 <__NVIC_SetPriorityGrouping>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001336:	b580      	push	{r7, lr}
 8001338:	b086      	sub	sp, #24
 800133a:	af00      	add	r7, sp, #0
 800133c:	4603      	mov	r3, r0
 800133e:	60b9      	str	r1, [r7, #8]
 8001340:	607a      	str	r2, [r7, #4]
 8001342:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001348:	f7ff ff3e 	bl	80011c8 <__NVIC_GetPriorityGrouping>
 800134c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	68b9      	ldr	r1, [r7, #8]
 8001352:	6978      	ldr	r0, [r7, #20]
 8001354:	f7ff ff8e 	bl	8001274 <NVIC_EncodePriority>
 8001358:	4602      	mov	r2, r0
 800135a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800135e:	4611      	mov	r1, r2
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ff5d 	bl	8001220 <__NVIC_SetPriority>
}
 8001366:	bf00      	nop
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	4603      	mov	r3, r0
 8001376:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ff31 	bl	80011e4 <__NVIC_EnableIRQ>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff ffa2 	bl	80012dc <SysTick_Config>
 8001398:	4603      	mov	r3, r0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b084      	sub	sp, #16
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013b0:	f7ff fc68 	bl	8000c84 <HAL_GetTick>
 80013b4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d008      	beq.n	80013d4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2280      	movs	r2, #128	@ 0x80
 80013c6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e052      	b.n	800147a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f022 0216 	bic.w	r2, r2, #22
 80013e2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	695a      	ldr	r2, [r3, #20]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80013f2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d103      	bne.n	8001404 <HAL_DMA_Abort+0x62>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001400:	2b00      	cmp	r3, #0
 8001402:	d007      	beq.n	8001414 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 0208 	bic.w	r2, r2, #8
 8001412:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f022 0201 	bic.w	r2, r2, #1
 8001422:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001424:	e013      	b.n	800144e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001426:	f7ff fc2d 	bl	8000c84 <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b05      	cmp	r3, #5
 8001432:	d90c      	bls.n	800144e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2220      	movs	r2, #32
 8001438:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2203      	movs	r2, #3
 800143e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e015      	b.n	800147a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1e4      	bne.n	8001426 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001460:	223f      	movs	r2, #63	@ 0x3f
 8001462:	409a      	lsls	r2, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2201      	movs	r2, #1
 800146c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001482:	b480      	push	{r7}
 8001484:	b083      	sub	sp, #12
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d004      	beq.n	80014a0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2280      	movs	r2, #128	@ 0x80
 800149a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e00c      	b.n	80014ba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2205      	movs	r2, #5
 80014a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f022 0201 	bic.w	r2, r2, #1
 80014b6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
	...

080014c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b089      	sub	sp, #36	@ 0x24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014da:	2300      	movs	r3, #0
 80014dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
 80014e2:	e159      	b.n	8001798 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014e4:	2201      	movs	r2, #1
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	4013      	ands	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	f040 8148 	bne.w	8001792 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f003 0303 	and.w	r3, r3, #3
 800150a:	2b01      	cmp	r3, #1
 800150c:	d005      	beq.n	800151a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001516:	2b02      	cmp	r3, #2
 8001518:	d130      	bne.n	800157c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	2203      	movs	r2, #3
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43db      	mvns	r3, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4013      	ands	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	68da      	ldr	r2, [r3, #12]
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4313      	orrs	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001550:	2201      	movs	r2, #1
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4013      	ands	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	091b      	lsrs	r3, r3, #4
 8001566:	f003 0201 	and.w	r2, r3, #1
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4313      	orrs	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f003 0303 	and.w	r3, r3, #3
 8001584:	2b03      	cmp	r3, #3
 8001586:	d017      	beq.n	80015b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	2203      	movs	r2, #3
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	689a      	ldr	r2, [r3, #8]
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f003 0303 	and.w	r3, r3, #3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d123      	bne.n	800160c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	08da      	lsrs	r2, r3, #3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3208      	adds	r2, #8
 80015cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	f003 0307 	and.w	r3, r3, #7
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	220f      	movs	r2, #15
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	43db      	mvns	r3, r3
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4013      	ands	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	691a      	ldr	r2, [r3, #16]
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	08da      	lsrs	r2, r3, #3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	3208      	adds	r2, #8
 8001606:	69b9      	ldr	r1, [r7, #24]
 8001608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	2203      	movs	r2, #3
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4013      	ands	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 0203 	and.w	r2, r3, #3
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001648:	2b00      	cmp	r3, #0
 800164a:	f000 80a2 	beq.w	8001792 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	4b57      	ldr	r3, [pc, #348]	@ (80017b0 <HAL_GPIO_Init+0x2e8>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001656:	4a56      	ldr	r2, [pc, #344]	@ (80017b0 <HAL_GPIO_Init+0x2e8>)
 8001658:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800165c:	6453      	str	r3, [r2, #68]	@ 0x44
 800165e:	4b54      	ldr	r3, [pc, #336]	@ (80017b0 <HAL_GPIO_Init+0x2e8>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001662:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800166a:	4a52      	ldr	r2, [pc, #328]	@ (80017b4 <HAL_GPIO_Init+0x2ec>)
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	089b      	lsrs	r3, r3, #2
 8001670:	3302      	adds	r3, #2
 8001672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001676:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f003 0303 	and.w	r3, r3, #3
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	220f      	movs	r2, #15
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43db      	mvns	r3, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4013      	ands	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a49      	ldr	r2, [pc, #292]	@ (80017b8 <HAL_GPIO_Init+0x2f0>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d019      	beq.n	80016ca <HAL_GPIO_Init+0x202>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a48      	ldr	r2, [pc, #288]	@ (80017bc <HAL_GPIO_Init+0x2f4>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d013      	beq.n	80016c6 <HAL_GPIO_Init+0x1fe>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a47      	ldr	r2, [pc, #284]	@ (80017c0 <HAL_GPIO_Init+0x2f8>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d00d      	beq.n	80016c2 <HAL_GPIO_Init+0x1fa>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a46      	ldr	r2, [pc, #280]	@ (80017c4 <HAL_GPIO_Init+0x2fc>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d007      	beq.n	80016be <HAL_GPIO_Init+0x1f6>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a45      	ldr	r2, [pc, #276]	@ (80017c8 <HAL_GPIO_Init+0x300>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d101      	bne.n	80016ba <HAL_GPIO_Init+0x1f2>
 80016b6:	2304      	movs	r3, #4
 80016b8:	e008      	b.n	80016cc <HAL_GPIO_Init+0x204>
 80016ba:	2307      	movs	r3, #7
 80016bc:	e006      	b.n	80016cc <HAL_GPIO_Init+0x204>
 80016be:	2303      	movs	r3, #3
 80016c0:	e004      	b.n	80016cc <HAL_GPIO_Init+0x204>
 80016c2:	2302      	movs	r3, #2
 80016c4:	e002      	b.n	80016cc <HAL_GPIO_Init+0x204>
 80016c6:	2301      	movs	r3, #1
 80016c8:	e000      	b.n	80016cc <HAL_GPIO_Init+0x204>
 80016ca:	2300      	movs	r3, #0
 80016cc:	69fa      	ldr	r2, [r7, #28]
 80016ce:	f002 0203 	and.w	r2, r2, #3
 80016d2:	0092      	lsls	r2, r2, #2
 80016d4:	4093      	lsls	r3, r2
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016dc:	4935      	ldr	r1, [pc, #212]	@ (80017b4 <HAL_GPIO_Init+0x2ec>)
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	089b      	lsrs	r3, r3, #2
 80016e2:	3302      	adds	r3, #2
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ea:	4b38      	ldr	r3, [pc, #224]	@ (80017cc <HAL_GPIO_Init+0x304>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	43db      	mvns	r3, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4013      	ands	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800170e:	4a2f      	ldr	r2, [pc, #188]	@ (80017cc <HAL_GPIO_Init+0x304>)
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001714:	4b2d      	ldr	r3, [pc, #180]	@ (80017cc <HAL_GPIO_Init+0x304>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	43db      	mvns	r3, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4013      	ands	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	4313      	orrs	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001738:	4a24      	ldr	r2, [pc, #144]	@ (80017cc <HAL_GPIO_Init+0x304>)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800173e:	4b23      	ldr	r3, [pc, #140]	@ (80017cc <HAL_GPIO_Init+0x304>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	43db      	mvns	r3, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4013      	ands	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	4313      	orrs	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001762:	4a1a      	ldr	r2, [pc, #104]	@ (80017cc <HAL_GPIO_Init+0x304>)
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001768:	4b18      	ldr	r3, [pc, #96]	@ (80017cc <HAL_GPIO_Init+0x304>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	43db      	mvns	r3, r3
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4013      	ands	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d003      	beq.n	800178c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	4313      	orrs	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800178c:	4a0f      	ldr	r2, [pc, #60]	@ (80017cc <HAL_GPIO_Init+0x304>)
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3301      	adds	r3, #1
 8001796:	61fb      	str	r3, [r7, #28]
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	2b0f      	cmp	r3, #15
 800179c:	f67f aea2 	bls.w	80014e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017a0:	bf00      	nop
 80017a2:	bf00      	nop
 80017a4:	3724      	adds	r7, #36	@ 0x24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40013800 	.word	0x40013800
 80017b8:	40020000 	.word	0x40020000
 80017bc:	40020400 	.word	0x40020400
 80017c0:	40020800 	.word	0x40020800
 80017c4:	40020c00 	.word	0x40020c00
 80017c8:	40021000 	.word	0x40021000
 80017cc:	40013c00 	.word	0x40013c00

080017d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d101      	bne.n	80017e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e267      	b.n	8001cb2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d075      	beq.n	80018da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80017ee:	4b88      	ldr	r3, [pc, #544]	@ (8001a10 <HAL_RCC_OscConfig+0x240>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 030c 	and.w	r3, r3, #12
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	d00c      	beq.n	8001814 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017fa:	4b85      	ldr	r3, [pc, #532]	@ (8001a10 <HAL_RCC_OscConfig+0x240>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001802:	2b08      	cmp	r3, #8
 8001804:	d112      	bne.n	800182c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001806:	4b82      	ldr	r3, [pc, #520]	@ (8001a10 <HAL_RCC_OscConfig+0x240>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800180e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001812:	d10b      	bne.n	800182c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001814:	4b7e      	ldr	r3, [pc, #504]	@ (8001a10 <HAL_RCC_OscConfig+0x240>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d05b      	beq.n	80018d8 <HAL_RCC_OscConfig+0x108>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d157      	bne.n	80018d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e242      	b.n	8001cb2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001834:	d106      	bne.n	8001844 <HAL_RCC_OscConfig+0x74>
 8001836:	4b76      	ldr	r3, [pc, #472]	@ (8001a10 <HAL_RCC_OscConfig+0x240>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a75      	ldr	r2, [pc, #468]	@ (8001a10 <HAL_RCC_OscConfig+0x240>)
 800183c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001840:	6013      	str	r3, [r2, #0]
 8001842:	e01d      	b.n	8001880 <HAL_RCC_OscConfig+0xb0>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800184c:	d10c      	bne.n	8001868 <HAL_RCC_OscConfig+0x98>
 800184e:	4b70      	ldr	r3, [pc, #448]	@ (8001a10 <HAL_RCC_OscConfig+0x240>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a6f      	ldr	r2, [pc, #444]	@ (8001a10 <HAL_RCC_OscConfig+0x240>)
 8001854:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001858:	6013      	str	r3, [r2, #0]
 800185a:	4b6d      	ldr	r3, [pc, #436]	@ (8001a10 <HAL_RCC_OscConfig+0x240>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a6c      	ldr	r2, [pc, #432]	@ (8001a10 <HAL_RCC_OscConfig+0x240>)
 8001860:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001864:	6013      	str	r3, [r2, #0]
 8001866:	e00b      	b.n	8001880 <HAL_RCC_OscConfig+0xb0>
 8001868:	4b69      	ldr	r3, [pc, #420]	@ (8001a10 <HAL_RCC_OscConfig+0x240>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a68      	ldr	r2, [pc, #416]	@ (8001a10 <HAL_RCC_OscConfig+0x240>)
 800186e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001872:	6013      	str	r3, [r2, #0]
 8001874:	4b66      	ldr	r3, [pc, #408]	@ (8001a10 <HAL_RCC_OscConfig+0x240>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a65      	ldr	r2, [pc, #404]	@ (8001a10 <HAL_RCC_OscConfig+0x240>)
 800187a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800187e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d013      	beq.n	80018b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001888:	f7ff f9fc 	bl	8000c84 <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001890:	f7ff f9f8 	bl	8000c84 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b64      	cmp	r3, #100	@ 0x64
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e207      	b.n	8001cb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018a2:	4b5b      	ldr	r3, [pc, #364]	@ (8001a10 <HAL_RCC_OscConfig+0x240>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d0f0      	beq.n	8001890 <HAL_RCC_OscConfig+0xc0>
 80018ae:	e014      	b.n	80018da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b0:	f7ff f9e8 	bl	8000c84 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018b8:	f7ff f9e4 	bl	8000c84 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b64      	cmp	r3, #100	@ 0x64
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e1f3      	b.n	8001cb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ca:	4b51      	ldr	r3, [pc, #324]	@ (8001a10 <HAL_RCC_OscConfig+0x240>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1f0      	bne.n	80018b8 <HAL_RCC_OscConfig+0xe8>
 80018d6:	e000      	b.n	80018da <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d063      	beq.n	80019ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80018e6:	4b4a      	ldr	r3, [pc, #296]	@ (8001a10 <HAL_RCC_OscConfig+0x240>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f003 030c 	and.w	r3, r3, #12
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d00b      	beq.n	800190a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018f2:	4b47      	ldr	r3, [pc, #284]	@ (8001a10 <HAL_RCC_OscConfig+0x240>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80018fa:	2b08      	cmp	r3, #8
 80018fc:	d11c      	bne.n	8001938 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018fe:	4b44      	ldr	r3, [pc, #272]	@ (8001a10 <HAL_RCC_OscConfig+0x240>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d116      	bne.n	8001938 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800190a:	4b41      	ldr	r3, [pc, #260]	@ (8001a10 <HAL_RCC_OscConfig+0x240>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d005      	beq.n	8001922 <HAL_RCC_OscConfig+0x152>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d001      	beq.n	8001922 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e1c7      	b.n	8001cb2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001922:	4b3b      	ldr	r3, [pc, #236]	@ (8001a10 <HAL_RCC_OscConfig+0x240>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	4937      	ldr	r1, [pc, #220]	@ (8001a10 <HAL_RCC_OscConfig+0x240>)
 8001932:	4313      	orrs	r3, r2
 8001934:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001936:	e03a      	b.n	80019ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d020      	beq.n	8001982 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001940:	4b34      	ldr	r3, [pc, #208]	@ (8001a14 <HAL_RCC_OscConfig+0x244>)
 8001942:	2201      	movs	r2, #1
 8001944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001946:	f7ff f99d 	bl	8000c84 <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800194e:	f7ff f999 	bl	8000c84 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e1a8      	b.n	8001cb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001960:	4b2b      	ldr	r3, [pc, #172]	@ (8001a10 <HAL_RCC_OscConfig+0x240>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0f0      	beq.n	800194e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800196c:	4b28      	ldr	r3, [pc, #160]	@ (8001a10 <HAL_RCC_OscConfig+0x240>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	00db      	lsls	r3, r3, #3
 800197a:	4925      	ldr	r1, [pc, #148]	@ (8001a10 <HAL_RCC_OscConfig+0x240>)
 800197c:	4313      	orrs	r3, r2
 800197e:	600b      	str	r3, [r1, #0]
 8001980:	e015      	b.n	80019ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001982:	4b24      	ldr	r3, [pc, #144]	@ (8001a14 <HAL_RCC_OscConfig+0x244>)
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001988:	f7ff f97c 	bl	8000c84 <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001990:	f7ff f978 	bl	8000c84 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e187      	b.n	8001cb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001a10 <HAL_RCC_OscConfig+0x240>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1f0      	bne.n	8001990 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0308 	and.w	r3, r3, #8
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d036      	beq.n	8001a28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d016      	beq.n	80019f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019c2:	4b15      	ldr	r3, [pc, #84]	@ (8001a18 <HAL_RCC_OscConfig+0x248>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c8:	f7ff f95c 	bl	8000c84 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019d0:	f7ff f958 	bl	8000c84 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e167      	b.n	8001cb2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001a10 <HAL_RCC_OscConfig+0x240>)
 80019e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0f0      	beq.n	80019d0 <HAL_RCC_OscConfig+0x200>
 80019ee:	e01b      	b.n	8001a28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019f0:	4b09      	ldr	r3, [pc, #36]	@ (8001a18 <HAL_RCC_OscConfig+0x248>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f6:	f7ff f945 	bl	8000c84 <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019fc:	e00e      	b.n	8001a1c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019fe:	f7ff f941 	bl	8000c84 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d907      	bls.n	8001a1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e150      	b.n	8001cb2 <HAL_RCC_OscConfig+0x4e2>
 8001a10:	40023800 	.word	0x40023800
 8001a14:	42470000 	.word	0x42470000
 8001a18:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a1c:	4b88      	ldr	r3, [pc, #544]	@ (8001c40 <HAL_RCC_OscConfig+0x470>)
 8001a1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1ea      	bne.n	80019fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0304 	and.w	r3, r3, #4
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 8097 	beq.w	8001b64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a36:	2300      	movs	r3, #0
 8001a38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a3a:	4b81      	ldr	r3, [pc, #516]	@ (8001c40 <HAL_RCC_OscConfig+0x470>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d10f      	bne.n	8001a66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	60bb      	str	r3, [r7, #8]
 8001a4a:	4b7d      	ldr	r3, [pc, #500]	@ (8001c40 <HAL_RCC_OscConfig+0x470>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4e:	4a7c      	ldr	r2, [pc, #496]	@ (8001c40 <HAL_RCC_OscConfig+0x470>)
 8001a50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a56:	4b7a      	ldr	r3, [pc, #488]	@ (8001c40 <HAL_RCC_OscConfig+0x470>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a62:	2301      	movs	r3, #1
 8001a64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a66:	4b77      	ldr	r3, [pc, #476]	@ (8001c44 <HAL_RCC_OscConfig+0x474>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d118      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a72:	4b74      	ldr	r3, [pc, #464]	@ (8001c44 <HAL_RCC_OscConfig+0x474>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a73      	ldr	r2, [pc, #460]	@ (8001c44 <HAL_RCC_OscConfig+0x474>)
 8001a78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a7e:	f7ff f901 	bl	8000c84 <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a86:	f7ff f8fd 	bl	8000c84 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e10c      	b.n	8001cb2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a98:	4b6a      	ldr	r3, [pc, #424]	@ (8001c44 <HAL_RCC_OscConfig+0x474>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0f0      	beq.n	8001a86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d106      	bne.n	8001aba <HAL_RCC_OscConfig+0x2ea>
 8001aac:	4b64      	ldr	r3, [pc, #400]	@ (8001c40 <HAL_RCC_OscConfig+0x470>)
 8001aae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ab0:	4a63      	ldr	r2, [pc, #396]	@ (8001c40 <HAL_RCC_OscConfig+0x470>)
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ab8:	e01c      	b.n	8001af4 <HAL_RCC_OscConfig+0x324>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	2b05      	cmp	r3, #5
 8001ac0:	d10c      	bne.n	8001adc <HAL_RCC_OscConfig+0x30c>
 8001ac2:	4b5f      	ldr	r3, [pc, #380]	@ (8001c40 <HAL_RCC_OscConfig+0x470>)
 8001ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ac6:	4a5e      	ldr	r2, [pc, #376]	@ (8001c40 <HAL_RCC_OscConfig+0x470>)
 8001ac8:	f043 0304 	orr.w	r3, r3, #4
 8001acc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ace:	4b5c      	ldr	r3, [pc, #368]	@ (8001c40 <HAL_RCC_OscConfig+0x470>)
 8001ad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ad2:	4a5b      	ldr	r2, [pc, #364]	@ (8001c40 <HAL_RCC_OscConfig+0x470>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ada:	e00b      	b.n	8001af4 <HAL_RCC_OscConfig+0x324>
 8001adc:	4b58      	ldr	r3, [pc, #352]	@ (8001c40 <HAL_RCC_OscConfig+0x470>)
 8001ade:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ae0:	4a57      	ldr	r2, [pc, #348]	@ (8001c40 <HAL_RCC_OscConfig+0x470>)
 8001ae2:	f023 0301 	bic.w	r3, r3, #1
 8001ae6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ae8:	4b55      	ldr	r3, [pc, #340]	@ (8001c40 <HAL_RCC_OscConfig+0x470>)
 8001aea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aec:	4a54      	ldr	r2, [pc, #336]	@ (8001c40 <HAL_RCC_OscConfig+0x470>)
 8001aee:	f023 0304 	bic.w	r3, r3, #4
 8001af2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d015      	beq.n	8001b28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001afc:	f7ff f8c2 	bl	8000c84 <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b02:	e00a      	b.n	8001b1a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b04:	f7ff f8be 	bl	8000c84 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e0cb      	b.n	8001cb2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b1a:	4b49      	ldr	r3, [pc, #292]	@ (8001c40 <HAL_RCC_OscConfig+0x470>)
 8001b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d0ee      	beq.n	8001b04 <HAL_RCC_OscConfig+0x334>
 8001b26:	e014      	b.n	8001b52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b28:	f7ff f8ac 	bl	8000c84 <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b2e:	e00a      	b.n	8001b46 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b30:	f7ff f8a8 	bl	8000c84 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e0b5      	b.n	8001cb2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b46:	4b3e      	ldr	r3, [pc, #248]	@ (8001c40 <HAL_RCC_OscConfig+0x470>)
 8001b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1ee      	bne.n	8001b30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b52:	7dfb      	ldrb	r3, [r7, #23]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d105      	bne.n	8001b64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b58:	4b39      	ldr	r3, [pc, #228]	@ (8001c40 <HAL_RCC_OscConfig+0x470>)
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5c:	4a38      	ldr	r2, [pc, #224]	@ (8001c40 <HAL_RCC_OscConfig+0x470>)
 8001b5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b62:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f000 80a1 	beq.w	8001cb0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b6e:	4b34      	ldr	r3, [pc, #208]	@ (8001c40 <HAL_RCC_OscConfig+0x470>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 030c 	and.w	r3, r3, #12
 8001b76:	2b08      	cmp	r3, #8
 8001b78:	d05c      	beq.n	8001c34 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d141      	bne.n	8001c06 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b82:	4b31      	ldr	r3, [pc, #196]	@ (8001c48 <HAL_RCC_OscConfig+0x478>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b88:	f7ff f87c 	bl	8000c84 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b90:	f7ff f878 	bl	8000c84 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e087      	b.n	8001cb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ba2:	4b27      	ldr	r3, [pc, #156]	@ (8001c40 <HAL_RCC_OscConfig+0x470>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1f0      	bne.n	8001b90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69da      	ldr	r2, [r3, #28]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a1b      	ldr	r3, [r3, #32]
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bbc:	019b      	lsls	r3, r3, #6
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc4:	085b      	lsrs	r3, r3, #1
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	041b      	lsls	r3, r3, #16
 8001bca:	431a      	orrs	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bd0:	061b      	lsls	r3, r3, #24
 8001bd2:	491b      	ldr	r1, [pc, #108]	@ (8001c40 <HAL_RCC_OscConfig+0x470>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c48 <HAL_RCC_OscConfig+0x478>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bde:	f7ff f851 	bl	8000c84 <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be6:	f7ff f84d 	bl	8000c84 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e05c      	b.n	8001cb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bf8:	4b11      	ldr	r3, [pc, #68]	@ (8001c40 <HAL_RCC_OscConfig+0x470>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0f0      	beq.n	8001be6 <HAL_RCC_OscConfig+0x416>
 8001c04:	e054      	b.n	8001cb0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c06:	4b10      	ldr	r3, [pc, #64]	@ (8001c48 <HAL_RCC_OscConfig+0x478>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0c:	f7ff f83a 	bl	8000c84 <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c14:	f7ff f836 	bl	8000c84 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e045      	b.n	8001cb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c26:	4b06      	ldr	r3, [pc, #24]	@ (8001c40 <HAL_RCC_OscConfig+0x470>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1f0      	bne.n	8001c14 <HAL_RCC_OscConfig+0x444>
 8001c32:	e03d      	b.n	8001cb0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d107      	bne.n	8001c4c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e038      	b.n	8001cb2 <HAL_RCC_OscConfig+0x4e2>
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40007000 	.word	0x40007000
 8001c48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cbc <HAL_RCC_OscConfig+0x4ec>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d028      	beq.n	8001cac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d121      	bne.n	8001cac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d11a      	bne.n	8001cac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d111      	bne.n	8001cac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c92:	085b      	lsrs	r3, r3, #1
 8001c94:	3b01      	subs	r3, #1
 8001c96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d107      	bne.n	8001cac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ca6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d001      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e000      	b.n	8001cb2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3718      	adds	r7, #24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40023800 	.word	0x40023800

08001cc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e0cc      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cd4:	4b68      	ldr	r3, [pc, #416]	@ (8001e78 <HAL_RCC_ClockConfig+0x1b8>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d90c      	bls.n	8001cfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce2:	4b65      	ldr	r3, [pc, #404]	@ (8001e78 <HAL_RCC_ClockConfig+0x1b8>)
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cea:	4b63      	ldr	r3, [pc, #396]	@ (8001e78 <HAL_RCC_ClockConfig+0x1b8>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d001      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e0b8      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d020      	beq.n	8001d4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d005      	beq.n	8001d20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d14:	4b59      	ldr	r3, [pc, #356]	@ (8001e7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	4a58      	ldr	r2, [pc, #352]	@ (8001e7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d1a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001d1e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0308 	and.w	r3, r3, #8
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d005      	beq.n	8001d38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d2c:	4b53      	ldr	r3, [pc, #332]	@ (8001e7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	4a52      	ldr	r2, [pc, #328]	@ (8001e7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d32:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001d36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d38:	4b50      	ldr	r3, [pc, #320]	@ (8001e7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	494d      	ldr	r1, [pc, #308]	@ (8001e7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d044      	beq.n	8001de0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d107      	bne.n	8001d6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d5e:	4b47      	ldr	r3, [pc, #284]	@ (8001e7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d119      	bne.n	8001d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e07f      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d003      	beq.n	8001d7e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d7a:	2b03      	cmp	r3, #3
 8001d7c:	d107      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d7e:	4b3f      	ldr	r3, [pc, #252]	@ (8001e7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d109      	bne.n	8001d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e06f      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d8e:	4b3b      	ldr	r3, [pc, #236]	@ (8001e7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e067      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d9e:	4b37      	ldr	r3, [pc, #220]	@ (8001e7c <HAL_RCC_ClockConfig+0x1bc>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f023 0203 	bic.w	r2, r3, #3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	4934      	ldr	r1, [pc, #208]	@ (8001e7c <HAL_RCC_ClockConfig+0x1bc>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001db0:	f7fe ff68 	bl	8000c84 <HAL_GetTick>
 8001db4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db6:	e00a      	b.n	8001dce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db8:	f7fe ff64 	bl	8000c84 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e04f      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dce:	4b2b      	ldr	r3, [pc, #172]	@ (8001e7c <HAL_RCC_ClockConfig+0x1bc>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 020c 	and.w	r2, r3, #12
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d1eb      	bne.n	8001db8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001de0:	4b25      	ldr	r3, [pc, #148]	@ (8001e78 <HAL_RCC_ClockConfig+0x1b8>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d20c      	bcs.n	8001e08 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dee:	4b22      	ldr	r3, [pc, #136]	@ (8001e78 <HAL_RCC_ClockConfig+0x1b8>)
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	b2d2      	uxtb	r2, r2
 8001df4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df6:	4b20      	ldr	r3, [pc, #128]	@ (8001e78 <HAL_RCC_ClockConfig+0x1b8>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d001      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e032      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d008      	beq.n	8001e26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e14:	4b19      	ldr	r3, [pc, #100]	@ (8001e7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	4916      	ldr	r1, [pc, #88]	@ (8001e7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0308 	and.w	r3, r3, #8
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d009      	beq.n	8001e46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e32:	4b12      	ldr	r3, [pc, #72]	@ (8001e7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	490e      	ldr	r1, [pc, #56]	@ (8001e7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e46:	f000 f821 	bl	8001e8c <HAL_RCC_GetSysClockFreq>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	091b      	lsrs	r3, r3, #4
 8001e52:	f003 030f 	and.w	r3, r3, #15
 8001e56:	490a      	ldr	r1, [pc, #40]	@ (8001e80 <HAL_RCC_ClockConfig+0x1c0>)
 8001e58:	5ccb      	ldrb	r3, [r1, r3]
 8001e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e5e:	4a09      	ldr	r2, [pc, #36]	@ (8001e84 <HAL_RCC_ClockConfig+0x1c4>)
 8001e60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001e62:	4b09      	ldr	r3, [pc, #36]	@ (8001e88 <HAL_RCC_ClockConfig+0x1c8>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7fe fec8 	bl	8000bfc <HAL_InitTick>

  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40023c00 	.word	0x40023c00
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	08003c18 	.word	0x08003c18
 8001e84:	20000000 	.word	0x20000000
 8001e88:	20000004 	.word	0x20000004

08001e8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e90:	b094      	sub	sp, #80	@ 0x50
 8001e92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e94:	2300      	movs	r3, #0
 8001e96:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ea4:	4b79      	ldr	r3, [pc, #484]	@ (800208c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 030c 	and.w	r3, r3, #12
 8001eac:	2b08      	cmp	r3, #8
 8001eae:	d00d      	beq.n	8001ecc <HAL_RCC_GetSysClockFreq+0x40>
 8001eb0:	2b08      	cmp	r3, #8
 8001eb2:	f200 80e1 	bhi.w	8002078 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d002      	beq.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x34>
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	d003      	beq.n	8001ec6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001ebe:	e0db      	b.n	8002078 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ec0:	4b73      	ldr	r3, [pc, #460]	@ (8002090 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ec2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ec4:	e0db      	b.n	800207e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ec6:	4b73      	ldr	r3, [pc, #460]	@ (8002094 <HAL_RCC_GetSysClockFreq+0x208>)
 8001ec8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001eca:	e0d8      	b.n	800207e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ecc:	4b6f      	ldr	r3, [pc, #444]	@ (800208c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ed4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ed6:	4b6d      	ldr	r3, [pc, #436]	@ (800208c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d063      	beq.n	8001faa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ee2:	4b6a      	ldr	r3, [pc, #424]	@ (800208c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	099b      	lsrs	r3, r3, #6
 8001ee8:	2200      	movs	r2, #0
 8001eea:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001eec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ef0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ef4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	637b      	str	r3, [r7, #52]	@ 0x34
 8001efa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001efe:	4622      	mov	r2, r4
 8001f00:	462b      	mov	r3, r5
 8001f02:	f04f 0000 	mov.w	r0, #0
 8001f06:	f04f 0100 	mov.w	r1, #0
 8001f0a:	0159      	lsls	r1, r3, #5
 8001f0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f10:	0150      	lsls	r0, r2, #5
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	4621      	mov	r1, r4
 8001f18:	1a51      	subs	r1, r2, r1
 8001f1a:	6139      	str	r1, [r7, #16]
 8001f1c:	4629      	mov	r1, r5
 8001f1e:	eb63 0301 	sbc.w	r3, r3, r1
 8001f22:	617b      	str	r3, [r7, #20]
 8001f24:	f04f 0200 	mov.w	r2, #0
 8001f28:	f04f 0300 	mov.w	r3, #0
 8001f2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f30:	4659      	mov	r1, fp
 8001f32:	018b      	lsls	r3, r1, #6
 8001f34:	4651      	mov	r1, sl
 8001f36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f3a:	4651      	mov	r1, sl
 8001f3c:	018a      	lsls	r2, r1, #6
 8001f3e:	4651      	mov	r1, sl
 8001f40:	ebb2 0801 	subs.w	r8, r2, r1
 8001f44:	4659      	mov	r1, fp
 8001f46:	eb63 0901 	sbc.w	r9, r3, r1
 8001f4a:	f04f 0200 	mov.w	r2, #0
 8001f4e:	f04f 0300 	mov.w	r3, #0
 8001f52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f5e:	4690      	mov	r8, r2
 8001f60:	4699      	mov	r9, r3
 8001f62:	4623      	mov	r3, r4
 8001f64:	eb18 0303 	adds.w	r3, r8, r3
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	462b      	mov	r3, r5
 8001f6c:	eb49 0303 	adc.w	r3, r9, r3
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	f04f 0200 	mov.w	r2, #0
 8001f76:	f04f 0300 	mov.w	r3, #0
 8001f7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f7e:	4629      	mov	r1, r5
 8001f80:	024b      	lsls	r3, r1, #9
 8001f82:	4621      	mov	r1, r4
 8001f84:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f88:	4621      	mov	r1, r4
 8001f8a:	024a      	lsls	r2, r1, #9
 8001f8c:	4610      	mov	r0, r2
 8001f8e:	4619      	mov	r1, r3
 8001f90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f92:	2200      	movs	r2, #0
 8001f94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001f98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001f9c:	f7fe f91c 	bl	80001d8 <__aeabi_uldivmod>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001fa8:	e058      	b.n	800205c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001faa:	4b38      	ldr	r3, [pc, #224]	@ (800208c <HAL_RCC_GetSysClockFreq+0x200>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	099b      	lsrs	r3, r3, #6
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	4611      	mov	r1, r2
 8001fb6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001fba:	623b      	str	r3, [r7, #32]
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fc0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001fc4:	4642      	mov	r2, r8
 8001fc6:	464b      	mov	r3, r9
 8001fc8:	f04f 0000 	mov.w	r0, #0
 8001fcc:	f04f 0100 	mov.w	r1, #0
 8001fd0:	0159      	lsls	r1, r3, #5
 8001fd2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fd6:	0150      	lsls	r0, r2, #5
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4641      	mov	r1, r8
 8001fde:	ebb2 0a01 	subs.w	sl, r2, r1
 8001fe2:	4649      	mov	r1, r9
 8001fe4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001fe8:	f04f 0200 	mov.w	r2, #0
 8001fec:	f04f 0300 	mov.w	r3, #0
 8001ff0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ff4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ff8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ffc:	ebb2 040a 	subs.w	r4, r2, sl
 8002000:	eb63 050b 	sbc.w	r5, r3, fp
 8002004:	f04f 0200 	mov.w	r2, #0
 8002008:	f04f 0300 	mov.w	r3, #0
 800200c:	00eb      	lsls	r3, r5, #3
 800200e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002012:	00e2      	lsls	r2, r4, #3
 8002014:	4614      	mov	r4, r2
 8002016:	461d      	mov	r5, r3
 8002018:	4643      	mov	r3, r8
 800201a:	18e3      	adds	r3, r4, r3
 800201c:	603b      	str	r3, [r7, #0]
 800201e:	464b      	mov	r3, r9
 8002020:	eb45 0303 	adc.w	r3, r5, r3
 8002024:	607b      	str	r3, [r7, #4]
 8002026:	f04f 0200 	mov.w	r2, #0
 800202a:	f04f 0300 	mov.w	r3, #0
 800202e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002032:	4629      	mov	r1, r5
 8002034:	028b      	lsls	r3, r1, #10
 8002036:	4621      	mov	r1, r4
 8002038:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800203c:	4621      	mov	r1, r4
 800203e:	028a      	lsls	r2, r1, #10
 8002040:	4610      	mov	r0, r2
 8002042:	4619      	mov	r1, r3
 8002044:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002046:	2200      	movs	r2, #0
 8002048:	61bb      	str	r3, [r7, #24]
 800204a:	61fa      	str	r2, [r7, #28]
 800204c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002050:	f7fe f8c2 	bl	80001d8 <__aeabi_uldivmod>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	4613      	mov	r3, r2
 800205a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800205c:	4b0b      	ldr	r3, [pc, #44]	@ (800208c <HAL_RCC_GetSysClockFreq+0x200>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	0c1b      	lsrs	r3, r3, #16
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	3301      	adds	r3, #1
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800206c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800206e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002070:	fbb2 f3f3 	udiv	r3, r2, r3
 8002074:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002076:	e002      	b.n	800207e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002078:	4b05      	ldr	r3, [pc, #20]	@ (8002090 <HAL_RCC_GetSysClockFreq+0x204>)
 800207a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800207c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800207e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002080:	4618      	mov	r0, r3
 8002082:	3750      	adds	r7, #80	@ 0x50
 8002084:	46bd      	mov	sp, r7
 8002086:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800208a:	bf00      	nop
 800208c:	40023800 	.word	0x40023800
 8002090:	00f42400 	.word	0x00f42400
 8002094:	007a1200 	.word	0x007a1200

08002098 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800209c:	4b03      	ldr	r3, [pc, #12]	@ (80020ac <HAL_RCC_GetHCLKFreq+0x14>)
 800209e:	681b      	ldr	r3, [r3, #0]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	20000000 	.word	0x20000000

080020b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020b4:	f7ff fff0 	bl	8002098 <HAL_RCC_GetHCLKFreq>
 80020b8:	4602      	mov	r2, r0
 80020ba:	4b05      	ldr	r3, [pc, #20]	@ (80020d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	0a9b      	lsrs	r3, r3, #10
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	4903      	ldr	r1, [pc, #12]	@ (80020d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020c6:	5ccb      	ldrb	r3, [r1, r3]
 80020c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40023800 	.word	0x40023800
 80020d4:	08003c28 	.word	0x08003c28

080020d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020dc:	f7ff ffdc 	bl	8002098 <HAL_RCC_GetHCLKFreq>
 80020e0:	4602      	mov	r2, r0
 80020e2:	4b05      	ldr	r3, [pc, #20]	@ (80020f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	0b5b      	lsrs	r3, r3, #13
 80020e8:	f003 0307 	and.w	r3, r3, #7
 80020ec:	4903      	ldr	r1, [pc, #12]	@ (80020fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80020ee:	5ccb      	ldrb	r3, [r1, r3]
 80020f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40023800 	.word	0x40023800
 80020fc:	08003c28 	.word	0x08003c28

08002100 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e041      	b.n	8002196 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d106      	bne.n	800212c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7fe fc28 	bl	800097c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2202      	movs	r2, #2
 8002130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3304      	adds	r3, #4
 800213c:	4619      	mov	r1, r3
 800213e:	4610      	mov	r0, r2
 8002140:	f000 fac0 	bl	80026c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b082      	sub	sp, #8
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e041      	b.n	8002234 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d106      	bne.n	80021ca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 f839 	bl	800223c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2202      	movs	r2, #2
 80021ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	3304      	adds	r3, #4
 80021da:	4619      	mov	r1, r3
 80021dc:	4610      	mov	r0, r2
 80021de:	f000 fa71 	bl	80026c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d109      	bne.n	8002274 <HAL_TIM_PWM_Start+0x24>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b01      	cmp	r3, #1
 800226a:	bf14      	ite	ne
 800226c:	2301      	movne	r3, #1
 800226e:	2300      	moveq	r3, #0
 8002270:	b2db      	uxtb	r3, r3
 8002272:	e022      	b.n	80022ba <HAL_TIM_PWM_Start+0x6a>
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	2b04      	cmp	r3, #4
 8002278:	d109      	bne.n	800228e <HAL_TIM_PWM_Start+0x3e>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b01      	cmp	r3, #1
 8002284:	bf14      	ite	ne
 8002286:	2301      	movne	r3, #1
 8002288:	2300      	moveq	r3, #0
 800228a:	b2db      	uxtb	r3, r3
 800228c:	e015      	b.n	80022ba <HAL_TIM_PWM_Start+0x6a>
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	2b08      	cmp	r3, #8
 8002292:	d109      	bne.n	80022a8 <HAL_TIM_PWM_Start+0x58>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b01      	cmp	r3, #1
 800229e:	bf14      	ite	ne
 80022a0:	2301      	movne	r3, #1
 80022a2:	2300      	moveq	r3, #0
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	e008      	b.n	80022ba <HAL_TIM_PWM_Start+0x6a>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	bf14      	ite	ne
 80022b4:	2301      	movne	r3, #1
 80022b6:	2300      	moveq	r3, #0
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e068      	b.n	8002394 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d104      	bne.n	80022d2 <HAL_TIM_PWM_Start+0x82>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2202      	movs	r2, #2
 80022cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022d0:	e013      	b.n	80022fa <HAL_TIM_PWM_Start+0xaa>
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	2b04      	cmp	r3, #4
 80022d6:	d104      	bne.n	80022e2 <HAL_TIM_PWM_Start+0x92>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2202      	movs	r2, #2
 80022dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022e0:	e00b      	b.n	80022fa <HAL_TIM_PWM_Start+0xaa>
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d104      	bne.n	80022f2 <HAL_TIM_PWM_Start+0xa2>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2202      	movs	r2, #2
 80022ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80022f0:	e003      	b.n	80022fa <HAL_TIM_PWM_Start+0xaa>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2202      	movs	r2, #2
 80022f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2201      	movs	r2, #1
 8002300:	6839      	ldr	r1, [r7, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f000 fc8a 	bl	8002c1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a23      	ldr	r2, [pc, #140]	@ (800239c <HAL_TIM_PWM_Start+0x14c>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d107      	bne.n	8002322 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002320:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a1d      	ldr	r2, [pc, #116]	@ (800239c <HAL_TIM_PWM_Start+0x14c>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d018      	beq.n	800235e <HAL_TIM_PWM_Start+0x10e>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002334:	d013      	beq.n	800235e <HAL_TIM_PWM_Start+0x10e>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a19      	ldr	r2, [pc, #100]	@ (80023a0 <HAL_TIM_PWM_Start+0x150>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d00e      	beq.n	800235e <HAL_TIM_PWM_Start+0x10e>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a17      	ldr	r2, [pc, #92]	@ (80023a4 <HAL_TIM_PWM_Start+0x154>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d009      	beq.n	800235e <HAL_TIM_PWM_Start+0x10e>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a16      	ldr	r2, [pc, #88]	@ (80023a8 <HAL_TIM_PWM_Start+0x158>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d004      	beq.n	800235e <HAL_TIM_PWM_Start+0x10e>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a14      	ldr	r2, [pc, #80]	@ (80023ac <HAL_TIM_PWM_Start+0x15c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d111      	bne.n	8002382 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2b06      	cmp	r3, #6
 800236e:	d010      	beq.n	8002392 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f042 0201 	orr.w	r2, r2, #1
 800237e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002380:	e007      	b.n	8002392 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f042 0201 	orr.w	r2, r2, #1
 8002390:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40010000 	.word	0x40010000
 80023a0:	40000400 	.word	0x40000400
 80023a4:	40000800 	.word	0x40000800
 80023a8:	40000c00 	.word	0x40000c00
 80023ac:	40014000 	.word	0x40014000

080023b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023bc:	2300      	movs	r3, #0
 80023be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d101      	bne.n	80023ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80023ca:	2302      	movs	r3, #2
 80023cc:	e0ae      	b.n	800252c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b0c      	cmp	r3, #12
 80023da:	f200 809f 	bhi.w	800251c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80023de:	a201      	add	r2, pc, #4	@ (adr r2, 80023e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80023e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e4:	08002419 	.word	0x08002419
 80023e8:	0800251d 	.word	0x0800251d
 80023ec:	0800251d 	.word	0x0800251d
 80023f0:	0800251d 	.word	0x0800251d
 80023f4:	08002459 	.word	0x08002459
 80023f8:	0800251d 	.word	0x0800251d
 80023fc:	0800251d 	.word	0x0800251d
 8002400:	0800251d 	.word	0x0800251d
 8002404:	0800249b 	.word	0x0800249b
 8002408:	0800251d 	.word	0x0800251d
 800240c:	0800251d 	.word	0x0800251d
 8002410:	0800251d 	.word	0x0800251d
 8002414:	080024db 	.word	0x080024db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68b9      	ldr	r1, [r7, #8]
 800241e:	4618      	mov	r0, r3
 8002420:	f000 f9d6 	bl	80027d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	699a      	ldr	r2, [r3, #24]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f042 0208 	orr.w	r2, r2, #8
 8002432:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	699a      	ldr	r2, [r3, #24]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 0204 	bic.w	r2, r2, #4
 8002442:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6999      	ldr	r1, [r3, #24]
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	691a      	ldr	r2, [r3, #16]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	430a      	orrs	r2, r1
 8002454:	619a      	str	r2, [r3, #24]
      break;
 8002456:	e064      	b.n	8002522 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68b9      	ldr	r1, [r7, #8]
 800245e:	4618      	mov	r0, r3
 8002460:	f000 fa1c 	bl	800289c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	699a      	ldr	r2, [r3, #24]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002472:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	699a      	ldr	r2, [r3, #24]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002482:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6999      	ldr	r1, [r3, #24]
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	021a      	lsls	r2, r3, #8
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	430a      	orrs	r2, r1
 8002496:	619a      	str	r2, [r3, #24]
      break;
 8002498:	e043      	b.n	8002522 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68b9      	ldr	r1, [r7, #8]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f000 fa67 	bl	8002974 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	69da      	ldr	r2, [r3, #28]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f042 0208 	orr.w	r2, r2, #8
 80024b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	69da      	ldr	r2, [r3, #28]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 0204 	bic.w	r2, r2, #4
 80024c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	69d9      	ldr	r1, [r3, #28]
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	691a      	ldr	r2, [r3, #16]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	430a      	orrs	r2, r1
 80024d6:	61da      	str	r2, [r3, #28]
      break;
 80024d8:	e023      	b.n	8002522 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68b9      	ldr	r1, [r7, #8]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f000 fab1 	bl	8002a48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	69da      	ldr	r2, [r3, #28]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	69da      	ldr	r2, [r3, #28]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002504:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	69d9      	ldr	r1, [r3, #28]
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	021a      	lsls	r2, r3, #8
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	61da      	str	r2, [r3, #28]
      break;
 800251a:	e002      	b.n	8002522 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	75fb      	strb	r3, [r7, #23]
      break;
 8002520:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800252a:	7dfb      	ldrb	r3, [r7, #23]
}
 800252c:	4618      	mov	r0, r3
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800253e:	2300      	movs	r3, #0
 8002540:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002548:	2b01      	cmp	r3, #1
 800254a:	d101      	bne.n	8002550 <HAL_TIM_ConfigClockSource+0x1c>
 800254c:	2302      	movs	r3, #2
 800254e:	e0b4      	b.n	80026ba <HAL_TIM_ConfigClockSource+0x186>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2202      	movs	r2, #2
 800255c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800256e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002576:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68ba      	ldr	r2, [r7, #8]
 800257e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002588:	d03e      	beq.n	8002608 <HAL_TIM_ConfigClockSource+0xd4>
 800258a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800258e:	f200 8087 	bhi.w	80026a0 <HAL_TIM_ConfigClockSource+0x16c>
 8002592:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002596:	f000 8086 	beq.w	80026a6 <HAL_TIM_ConfigClockSource+0x172>
 800259a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800259e:	d87f      	bhi.n	80026a0 <HAL_TIM_ConfigClockSource+0x16c>
 80025a0:	2b70      	cmp	r3, #112	@ 0x70
 80025a2:	d01a      	beq.n	80025da <HAL_TIM_ConfigClockSource+0xa6>
 80025a4:	2b70      	cmp	r3, #112	@ 0x70
 80025a6:	d87b      	bhi.n	80026a0 <HAL_TIM_ConfigClockSource+0x16c>
 80025a8:	2b60      	cmp	r3, #96	@ 0x60
 80025aa:	d050      	beq.n	800264e <HAL_TIM_ConfigClockSource+0x11a>
 80025ac:	2b60      	cmp	r3, #96	@ 0x60
 80025ae:	d877      	bhi.n	80026a0 <HAL_TIM_ConfigClockSource+0x16c>
 80025b0:	2b50      	cmp	r3, #80	@ 0x50
 80025b2:	d03c      	beq.n	800262e <HAL_TIM_ConfigClockSource+0xfa>
 80025b4:	2b50      	cmp	r3, #80	@ 0x50
 80025b6:	d873      	bhi.n	80026a0 <HAL_TIM_ConfigClockSource+0x16c>
 80025b8:	2b40      	cmp	r3, #64	@ 0x40
 80025ba:	d058      	beq.n	800266e <HAL_TIM_ConfigClockSource+0x13a>
 80025bc:	2b40      	cmp	r3, #64	@ 0x40
 80025be:	d86f      	bhi.n	80026a0 <HAL_TIM_ConfigClockSource+0x16c>
 80025c0:	2b30      	cmp	r3, #48	@ 0x30
 80025c2:	d064      	beq.n	800268e <HAL_TIM_ConfigClockSource+0x15a>
 80025c4:	2b30      	cmp	r3, #48	@ 0x30
 80025c6:	d86b      	bhi.n	80026a0 <HAL_TIM_ConfigClockSource+0x16c>
 80025c8:	2b20      	cmp	r3, #32
 80025ca:	d060      	beq.n	800268e <HAL_TIM_ConfigClockSource+0x15a>
 80025cc:	2b20      	cmp	r3, #32
 80025ce:	d867      	bhi.n	80026a0 <HAL_TIM_ConfigClockSource+0x16c>
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d05c      	beq.n	800268e <HAL_TIM_ConfigClockSource+0x15a>
 80025d4:	2b10      	cmp	r3, #16
 80025d6:	d05a      	beq.n	800268e <HAL_TIM_ConfigClockSource+0x15a>
 80025d8:	e062      	b.n	80026a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80025ea:	f000 faf7 	bl	8002bdc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80025fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	609a      	str	r2, [r3, #8]
      break;
 8002606:	e04f      	b.n	80026a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002618:	f000 fae0 	bl	8002bdc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689a      	ldr	r2, [r3, #8]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800262a:	609a      	str	r2, [r3, #8]
      break;
 800262c:	e03c      	b.n	80026a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800263a:	461a      	mov	r2, r3
 800263c:	f000 fa54 	bl	8002ae8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2150      	movs	r1, #80	@ 0x50
 8002646:	4618      	mov	r0, r3
 8002648:	f000 faad 	bl	8002ba6 <TIM_ITRx_SetConfig>
      break;
 800264c:	e02c      	b.n	80026a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800265a:	461a      	mov	r2, r3
 800265c:	f000 fa73 	bl	8002b46 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2160      	movs	r1, #96	@ 0x60
 8002666:	4618      	mov	r0, r3
 8002668:	f000 fa9d 	bl	8002ba6 <TIM_ITRx_SetConfig>
      break;
 800266c:	e01c      	b.n	80026a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800267a:	461a      	mov	r2, r3
 800267c:	f000 fa34 	bl	8002ae8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2140      	movs	r1, #64	@ 0x40
 8002686:	4618      	mov	r0, r3
 8002688:	f000 fa8d 	bl	8002ba6 <TIM_ITRx_SetConfig>
      break;
 800268c:	e00c      	b.n	80026a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4619      	mov	r1, r3
 8002698:	4610      	mov	r0, r2
 800269a:	f000 fa84 	bl	8002ba6 <TIM_ITRx_SetConfig>
      break;
 800269e:	e003      	b.n	80026a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	73fb      	strb	r3, [r7, #15]
      break;
 80026a4:	e000      	b.n	80026a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80026a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80026b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
	...

080026c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a37      	ldr	r2, [pc, #220]	@ (80027b4 <TIM_Base_SetConfig+0xf0>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d00f      	beq.n	80026fc <TIM_Base_SetConfig+0x38>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026e2:	d00b      	beq.n	80026fc <TIM_Base_SetConfig+0x38>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a34      	ldr	r2, [pc, #208]	@ (80027b8 <TIM_Base_SetConfig+0xf4>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d007      	beq.n	80026fc <TIM_Base_SetConfig+0x38>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a33      	ldr	r2, [pc, #204]	@ (80027bc <TIM_Base_SetConfig+0xf8>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d003      	beq.n	80026fc <TIM_Base_SetConfig+0x38>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a32      	ldr	r2, [pc, #200]	@ (80027c0 <TIM_Base_SetConfig+0xfc>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d108      	bne.n	800270e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002702:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	4313      	orrs	r3, r2
 800270c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a28      	ldr	r2, [pc, #160]	@ (80027b4 <TIM_Base_SetConfig+0xf0>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d01b      	beq.n	800274e <TIM_Base_SetConfig+0x8a>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800271c:	d017      	beq.n	800274e <TIM_Base_SetConfig+0x8a>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a25      	ldr	r2, [pc, #148]	@ (80027b8 <TIM_Base_SetConfig+0xf4>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d013      	beq.n	800274e <TIM_Base_SetConfig+0x8a>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a24      	ldr	r2, [pc, #144]	@ (80027bc <TIM_Base_SetConfig+0xf8>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d00f      	beq.n	800274e <TIM_Base_SetConfig+0x8a>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a23      	ldr	r2, [pc, #140]	@ (80027c0 <TIM_Base_SetConfig+0xfc>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d00b      	beq.n	800274e <TIM_Base_SetConfig+0x8a>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a22      	ldr	r2, [pc, #136]	@ (80027c4 <TIM_Base_SetConfig+0x100>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d007      	beq.n	800274e <TIM_Base_SetConfig+0x8a>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a21      	ldr	r2, [pc, #132]	@ (80027c8 <TIM_Base_SetConfig+0x104>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d003      	beq.n	800274e <TIM_Base_SetConfig+0x8a>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a20      	ldr	r2, [pc, #128]	@ (80027cc <TIM_Base_SetConfig+0x108>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d108      	bne.n	8002760 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002754:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	4313      	orrs	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	4313      	orrs	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	689a      	ldr	r2, [r3, #8]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a0c      	ldr	r2, [pc, #48]	@ (80027b4 <TIM_Base_SetConfig+0xf0>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d103      	bne.n	800278e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	691a      	ldr	r2, [r3, #16]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f043 0204 	orr.w	r2, r3, #4
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2201      	movs	r2, #1
 800279e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	601a      	str	r2, [r3, #0]
}
 80027a6:	bf00      	nop
 80027a8:	3714      	adds	r7, #20
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	40010000 	.word	0x40010000
 80027b8:	40000400 	.word	0x40000400
 80027bc:	40000800 	.word	0x40000800
 80027c0:	40000c00 	.word	0x40000c00
 80027c4:	40014000 	.word	0x40014000
 80027c8:	40014400 	.word	0x40014400
 80027cc:	40014800 	.word	0x40014800

080027d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b087      	sub	sp, #28
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	f023 0201 	bic.w	r2, r3, #1
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f023 0303 	bic.w	r3, r3, #3
 8002806:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	4313      	orrs	r3, r2
 8002810:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f023 0302 	bic.w	r3, r3, #2
 8002818:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	4313      	orrs	r3, r2
 8002822:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a1c      	ldr	r2, [pc, #112]	@ (8002898 <TIM_OC1_SetConfig+0xc8>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d10c      	bne.n	8002846 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	f023 0308 	bic.w	r3, r3, #8
 8002832:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	4313      	orrs	r3, r2
 800283c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	f023 0304 	bic.w	r3, r3, #4
 8002844:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a13      	ldr	r2, [pc, #76]	@ (8002898 <TIM_OC1_SetConfig+0xc8>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d111      	bne.n	8002872 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002854:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800285c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	4313      	orrs	r3, r2
 8002866:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	4313      	orrs	r3, r2
 8002870:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	697a      	ldr	r2, [r7, #20]
 800288a:	621a      	str	r2, [r3, #32]
}
 800288c:	bf00      	nop
 800288e:	371c      	adds	r7, #28
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	40010000 	.word	0x40010000

0800289c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800289c:	b480      	push	{r7}
 800289e:	b087      	sub	sp, #28
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	f023 0210 	bic.w	r2, r3, #16
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80028ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	021b      	lsls	r3, r3, #8
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	4313      	orrs	r3, r2
 80028de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	f023 0320 	bic.w	r3, r3, #32
 80028e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	011b      	lsls	r3, r3, #4
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a1e      	ldr	r2, [pc, #120]	@ (8002970 <TIM_OC2_SetConfig+0xd4>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d10d      	bne.n	8002918 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002902:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	011b      	lsls	r3, r3, #4
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	4313      	orrs	r3, r2
 800290e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002916:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a15      	ldr	r2, [pc, #84]	@ (8002970 <TIM_OC2_SetConfig+0xd4>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d113      	bne.n	8002948 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002926:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800292e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	4313      	orrs	r3, r2
 800293a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	4313      	orrs	r3, r2
 8002946:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	621a      	str	r2, [r3, #32]
}
 8002962:	bf00      	nop
 8002964:	371c      	adds	r7, #28
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	40010000 	.word	0x40010000

08002974 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002974:	b480      	push	{r7}
 8002976:	b087      	sub	sp, #28
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f023 0303 	bic.w	r3, r3, #3
 80029aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80029bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	021b      	lsls	r3, r3, #8
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a1d      	ldr	r2, [pc, #116]	@ (8002a44 <TIM_OC3_SetConfig+0xd0>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d10d      	bne.n	80029ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80029d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	021b      	lsls	r3, r3, #8
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80029ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a14      	ldr	r2, [pc, #80]	@ (8002a44 <TIM_OC3_SetConfig+0xd0>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d113      	bne.n	8002a1e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80029fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002a04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	011b      	lsls	r3, r3, #4
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	011b      	lsls	r3, r3, #4
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685a      	ldr	r2, [r3, #4]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	621a      	str	r2, [r3, #32]
}
 8002a38:	bf00      	nop
 8002a3a:	371c      	adds	r7, #28
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr
 8002a44:	40010000 	.word	0x40010000

08002a48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b087      	sub	sp, #28
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	021b      	lsls	r3, r3, #8
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002a92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	031b      	lsls	r3, r3, #12
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a10      	ldr	r2, [pc, #64]	@ (8002ae4 <TIM_OC4_SetConfig+0x9c>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d109      	bne.n	8002abc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002aae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	019b      	lsls	r3, r3, #6
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	621a      	str	r2, [r3, #32]
}
 8002ad6:	bf00      	nop
 8002ad8:	371c      	adds	r7, #28
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	40010000 	.word	0x40010000

08002ae8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b087      	sub	sp, #28
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	f023 0201 	bic.w	r2, r3, #1
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	011b      	lsls	r3, r3, #4
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f023 030a 	bic.w	r3, r3, #10
 8002b24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	621a      	str	r2, [r3, #32]
}
 8002b3a:	bf00      	nop
 8002b3c:	371c      	adds	r7, #28
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b087      	sub	sp, #28
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	60f8      	str	r0, [r7, #12]
 8002b4e:	60b9      	str	r1, [r7, #8]
 8002b50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	f023 0210 	bic.w	r2, r3, #16
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002b70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	031b      	lsls	r3, r3, #12
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002b82:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	011b      	lsls	r3, r3, #4
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	621a      	str	r2, [r3, #32]
}
 8002b9a:	bf00      	nop
 8002b9c:	371c      	adds	r7, #28
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b085      	sub	sp, #20
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
 8002bae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	f043 0307 	orr.w	r3, r3, #7
 8002bc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	609a      	str	r2, [r3, #8]
}
 8002bd0:	bf00      	nop
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b087      	sub	sp, #28
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
 8002be8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002bf6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	021a      	lsls	r2, r3, #8
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	609a      	str	r2, [r3, #8]
}
 8002c10:	bf00      	nop
 8002c12:	371c      	adds	r7, #28
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b087      	sub	sp, #28
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	f003 031f 	and.w	r3, r3, #31
 8002c2e:	2201      	movs	r2, #1
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6a1a      	ldr	r2, [r3, #32]
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	401a      	ands	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6a1a      	ldr	r2, [r3, #32]
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	f003 031f 	and.w	r3, r3, #31
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	fa01 f303 	lsl.w	r3, r1, r3
 8002c54:	431a      	orrs	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	621a      	str	r2, [r3, #32]
}
 8002c5a:	bf00      	nop
 8002c5c:	371c      	adds	r7, #28
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
	...

08002c68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d101      	bne.n	8002c80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	e050      	b.n	8002d22 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ca6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a1c      	ldr	r2, [pc, #112]	@ (8002d30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d018      	beq.n	8002cf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ccc:	d013      	beq.n	8002cf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a18      	ldr	r2, [pc, #96]	@ (8002d34 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d00e      	beq.n	8002cf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a16      	ldr	r2, [pc, #88]	@ (8002d38 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d009      	beq.n	8002cf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a15      	ldr	r2, [pc, #84]	@ (8002d3c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d004      	beq.n	8002cf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a13      	ldr	r2, [pc, #76]	@ (8002d40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d10c      	bne.n	8002d10 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002cfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	68ba      	ldr	r2, [r7, #8]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68ba      	ldr	r2, [r7, #8]
 8002d0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3714      	adds	r7, #20
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	40010000 	.word	0x40010000
 8002d34:	40000400 	.word	0x40000400
 8002d38:	40000800 	.word	0x40000800
 8002d3c:	40000c00 	.word	0x40000c00
 8002d40:	40014000 	.word	0x40014000

08002d44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e042      	b.n	8002ddc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d106      	bne.n	8002d70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7fd fe5e 	bl	8000a2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2224      	movs	r2, #36	@ 0x24
 8002d74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68da      	ldr	r2, [r3, #12]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 fc99 	bl	80036c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	691a      	ldr	r2, [r3, #16]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	695a      	ldr	r2, [r3, #20]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002dac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68da      	ldr	r2, [r3, #12]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002dbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3708      	adds	r7, #8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b0ba      	sub	sp, #232	@ 0xe8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002e22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10f      	bne.n	8002e4a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e2e:	f003 0320 	and.w	r3, r3, #32
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d009      	beq.n	8002e4a <HAL_UART_IRQHandler+0x66>
 8002e36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e3a:	f003 0320 	and.w	r3, r3, #32
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 fb7e 	bl	8003544 <UART_Receive_IT>
      return;
 8002e48:	e273      	b.n	8003332 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002e4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 80de 	beq.w	8003010 <HAL_UART_IRQHandler+0x22c>
 8002e54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d106      	bne.n	8002e6e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e64:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 80d1 	beq.w	8003010 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00b      	beq.n	8002e92 <HAL_UART_IRQHandler+0xae>
 8002e7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d005      	beq.n	8002e92 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e8a:	f043 0201 	orr.w	r2, r3, #1
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e96:	f003 0304 	and.w	r3, r3, #4
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00b      	beq.n	8002eb6 <HAL_UART_IRQHandler+0xd2>
 8002e9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d005      	beq.n	8002eb6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eae:	f043 0202 	orr.w	r2, r3, #2
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00b      	beq.n	8002eda <HAL_UART_IRQHandler+0xf6>
 8002ec2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d005      	beq.n	8002eda <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed2:	f043 0204 	orr.w	r2, r3, #4
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d011      	beq.n	8002f0a <HAL_UART_IRQHandler+0x126>
 8002ee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002eea:	f003 0320 	and.w	r3, r3, #32
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d105      	bne.n	8002efe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ef2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d005      	beq.n	8002f0a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f02:	f043 0208 	orr.w	r2, r3, #8
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f000 820a 	beq.w	8003328 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f18:	f003 0320 	and.w	r3, r3, #32
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d008      	beq.n	8002f32 <HAL_UART_IRQHandler+0x14e>
 8002f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f24:	f003 0320 	and.w	r3, r3, #32
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d002      	beq.n	8002f32 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 fb09 	bl	8003544 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f3c:	2b40      	cmp	r3, #64	@ 0x40
 8002f3e:	bf0c      	ite	eq
 8002f40:	2301      	moveq	r3, #1
 8002f42:	2300      	movne	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f4e:	f003 0308 	and.w	r3, r3, #8
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d103      	bne.n	8002f5e <HAL_UART_IRQHandler+0x17a>
 8002f56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d04f      	beq.n	8002ffe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 fa14 	bl	800338c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f6e:	2b40      	cmp	r3, #64	@ 0x40
 8002f70:	d141      	bne.n	8002ff6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	3314      	adds	r3, #20
 8002f78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f80:	e853 3f00 	ldrex	r3, [r3]
 8002f84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002f88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	3314      	adds	r3, #20
 8002f9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002f9e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002fa2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002faa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002fae:	e841 2300 	strex	r3, r2, [r1]
 8002fb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002fb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1d9      	bne.n	8002f72 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d013      	beq.n	8002fee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fca:	4a8a      	ldr	r2, [pc, #552]	@ (80031f4 <HAL_UART_IRQHandler+0x410>)
 8002fcc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fe fa55 	bl	8001482 <HAL_DMA_Abort_IT>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d016      	beq.n	800300c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002fe8:	4610      	mov	r0, r2
 8002fea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fec:	e00e      	b.n	800300c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f9b6 	bl	8003360 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ff4:	e00a      	b.n	800300c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 f9b2 	bl	8003360 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ffc:	e006      	b.n	800300c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f9ae 	bl	8003360 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800300a:	e18d      	b.n	8003328 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800300c:	bf00      	nop
    return;
 800300e:	e18b      	b.n	8003328 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003014:	2b01      	cmp	r3, #1
 8003016:	f040 8167 	bne.w	80032e8 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800301a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800301e:	f003 0310 	and.w	r3, r3, #16
 8003022:	2b00      	cmp	r3, #0
 8003024:	f000 8160 	beq.w	80032e8 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8003028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800302c:	f003 0310 	and.w	r3, r3, #16
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 8159 	beq.w	80032e8 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003036:	2300      	movs	r3, #0
 8003038:	60bb      	str	r3, [r7, #8]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	60bb      	str	r3, [r7, #8]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	60bb      	str	r3, [r7, #8]
 800304a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003056:	2b40      	cmp	r3, #64	@ 0x40
 8003058:	f040 80ce 	bne.w	80031f8 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003068:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800306c:	2b00      	cmp	r3, #0
 800306e:	f000 80a9 	beq.w	80031c4 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003076:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800307a:	429a      	cmp	r2, r3
 800307c:	f080 80a2 	bcs.w	80031c4 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003086:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003092:	f000 8088 	beq.w	80031a6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	330c      	adds	r3, #12
 800309c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80030a4:	e853 3f00 	ldrex	r3, [r3]
 80030a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80030ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80030b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	330c      	adds	r3, #12
 80030be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80030c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80030c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80030ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80030d2:	e841 2300 	strex	r3, r2, [r1]
 80030d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80030da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1d9      	bne.n	8003096 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	3314      	adds	r3, #20
 80030e8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030ec:	e853 3f00 	ldrex	r3, [r3]
 80030f0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80030f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80030f4:	f023 0301 	bic.w	r3, r3, #1
 80030f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	3314      	adds	r3, #20
 8003102:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003106:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800310a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800310c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800310e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003112:	e841 2300 	strex	r3, r2, [r1]
 8003116:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003118:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1e1      	bne.n	80030e2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	3314      	adds	r3, #20
 8003124:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003126:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003128:	e853 3f00 	ldrex	r3, [r3]
 800312c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800312e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003130:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003134:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	3314      	adds	r3, #20
 800313e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003142:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003144:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003146:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003148:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800314a:	e841 2300 	strex	r3, r2, [r1]
 800314e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003150:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1e3      	bne.n	800311e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2220      	movs	r2, #32
 800315a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	330c      	adds	r3, #12
 800316a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800316c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800316e:	e853 3f00 	ldrex	r3, [r3]
 8003172:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003174:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003176:	f023 0310 	bic.w	r3, r3, #16
 800317a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	330c      	adds	r3, #12
 8003184:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003188:	65ba      	str	r2, [r7, #88]	@ 0x58
 800318a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800318c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800318e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003190:	e841 2300 	strex	r3, r2, [r1]
 8003194:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003196:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1e3      	bne.n	8003164 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7fe f8fe 	bl	80013a2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2202      	movs	r2, #2
 80031aa:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	4619      	mov	r1, r3
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 f8d9 	bl	8003374 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80031c2:	e0b3      	b.n	800332c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80031c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80031cc:	429a      	cmp	r2, r3
 80031ce:	f040 80ad 	bne.w	800332c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031d6:	69db      	ldr	r3, [r3, #28]
 80031d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031dc:	f040 80a6 	bne.w	800332c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2202      	movs	r2, #2
 80031e4:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80031ea:	4619      	mov	r1, r3
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 f8c1 	bl	8003374 <HAL_UARTEx_RxEventCallback>
      return;
 80031f2:	e09b      	b.n	800332c <HAL_UART_IRQHandler+0x548>
 80031f4:	08003453 	.word	0x08003453
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003200:	b29b      	uxth	r3, r3
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800320c:	b29b      	uxth	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	f000 808e 	beq.w	8003330 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003214:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003218:	2b00      	cmp	r3, #0
 800321a:	f000 8089 	beq.w	8003330 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	330c      	adds	r3, #12
 8003224:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003228:	e853 3f00 	ldrex	r3, [r3]
 800322c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800322e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003230:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003234:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	330c      	adds	r3, #12
 800323e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003242:	647a      	str	r2, [r7, #68]	@ 0x44
 8003244:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003246:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003248:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800324a:	e841 2300 	strex	r3, r2, [r1]
 800324e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003250:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1e3      	bne.n	800321e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	3314      	adds	r3, #20
 800325c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800325e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003260:	e853 3f00 	ldrex	r3, [r3]
 8003264:	623b      	str	r3, [r7, #32]
   return(result);
 8003266:	6a3b      	ldr	r3, [r7, #32]
 8003268:	f023 0301 	bic.w	r3, r3, #1
 800326c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	3314      	adds	r3, #20
 8003276:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800327a:	633a      	str	r2, [r7, #48]	@ 0x30
 800327c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800327e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003280:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003282:	e841 2300 	strex	r3, r2, [r1]
 8003286:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1e3      	bne.n	8003256 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2220      	movs	r2, #32
 8003292:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	330c      	adds	r3, #12
 80032a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	e853 3f00 	ldrex	r3, [r3]
 80032aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f023 0310 	bic.w	r3, r3, #16
 80032b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	330c      	adds	r3, #12
 80032bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80032c0:	61fa      	str	r2, [r7, #28]
 80032c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c4:	69b9      	ldr	r1, [r7, #24]
 80032c6:	69fa      	ldr	r2, [r7, #28]
 80032c8:	e841 2300 	strex	r3, r2, [r1]
 80032cc:	617b      	str	r3, [r7, #20]
   return(result);
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1e3      	bne.n	800329c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2202      	movs	r2, #2
 80032d8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80032de:	4619      	mov	r1, r3
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 f847 	bl	8003374 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80032e6:	e023      	b.n	8003330 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80032e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d009      	beq.n	8003308 <HAL_UART_IRQHandler+0x524>
 80032f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d003      	beq.n	8003308 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 f8b7 	bl	8003474 <UART_Transmit_IT>
    return;
 8003306:	e014      	b.n	8003332 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800330c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00e      	beq.n	8003332 <HAL_UART_IRQHandler+0x54e>
 8003314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800331c:	2b00      	cmp	r3, #0
 800331e:	d008      	beq.n	8003332 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 f8f7 	bl	8003514 <UART_EndTransmit_IT>
    return;
 8003326:	e004      	b.n	8003332 <HAL_UART_IRQHandler+0x54e>
    return;
 8003328:	bf00      	nop
 800332a:	e002      	b.n	8003332 <HAL_UART_IRQHandler+0x54e>
      return;
 800332c:	bf00      	nop
 800332e:	e000      	b.n	8003332 <HAL_UART_IRQHandler+0x54e>
      return;
 8003330:	bf00      	nop
  }
}
 8003332:	37e8      	adds	r7, #232	@ 0xe8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	460b      	mov	r3, r1
 800337e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800338c:	b480      	push	{r7}
 800338e:	b095      	sub	sp, #84	@ 0x54
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	330c      	adds	r3, #12
 800339a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800339e:	e853 3f00 	ldrex	r3, [r3]
 80033a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80033a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80033aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	330c      	adds	r3, #12
 80033b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80033b4:	643a      	str	r2, [r7, #64]	@ 0x40
 80033b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80033ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80033bc:	e841 2300 	strex	r3, r2, [r1]
 80033c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80033c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1e5      	bne.n	8003394 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	3314      	adds	r3, #20
 80033ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d0:	6a3b      	ldr	r3, [r7, #32]
 80033d2:	e853 3f00 	ldrex	r3, [r3]
 80033d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	f023 0301 	bic.w	r3, r3, #1
 80033de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	3314      	adds	r3, #20
 80033e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033f0:	e841 2300 	strex	r3, r2, [r1]
 80033f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80033f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1e5      	bne.n	80033c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003400:	2b01      	cmp	r3, #1
 8003402:	d119      	bne.n	8003438 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	330c      	adds	r3, #12
 800340a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	e853 3f00 	ldrex	r3, [r3]
 8003412:	60bb      	str	r3, [r7, #8]
   return(result);
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	f023 0310 	bic.w	r3, r3, #16
 800341a:	647b      	str	r3, [r7, #68]	@ 0x44
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	330c      	adds	r3, #12
 8003422:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003424:	61ba      	str	r2, [r7, #24]
 8003426:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003428:	6979      	ldr	r1, [r7, #20]
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	e841 2300 	strex	r3, r2, [r1]
 8003430:	613b      	str	r3, [r7, #16]
   return(result);
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1e5      	bne.n	8003404 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2220      	movs	r2, #32
 800343c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003446:	bf00      	nop
 8003448:	3754      	adds	r7, #84	@ 0x54
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr

08003452 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b084      	sub	sp, #16
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800345e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f7ff ff7a 	bl	8003360 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800346c:	bf00      	nop
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b21      	cmp	r3, #33	@ 0x21
 8003486:	d13e      	bne.n	8003506 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003490:	d114      	bne.n	80034bc <UART_Transmit_IT+0x48>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d110      	bne.n	80034bc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	881b      	ldrh	r3, [r3, #0]
 80034a4:	461a      	mov	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034ae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	1c9a      	adds	r2, r3, #2
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	621a      	str	r2, [r3, #32]
 80034ba:	e008      	b.n	80034ce <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	1c59      	adds	r1, r3, #1
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6211      	str	r1, [r2, #32]
 80034c6:	781a      	ldrb	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	3b01      	subs	r3, #1
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	4619      	mov	r1, r3
 80034dc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10f      	bne.n	8003502 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68da      	ldr	r2, [r3, #12]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034f0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68da      	ldr	r2, [r3, #12]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003500:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003502:	2300      	movs	r3, #0
 8003504:	e000      	b.n	8003508 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003506:	2302      	movs	r3, #2
  }
}
 8003508:	4618      	mov	r0, r3
 800350a:	3714      	adds	r7, #20
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68da      	ldr	r2, [r3, #12]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800352a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2220      	movs	r2, #32
 8003530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f7ff feff 	bl	8003338 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3708      	adds	r7, #8
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b08c      	sub	sp, #48	@ 0x30
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800354c:	2300      	movs	r3, #0
 800354e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8003550:	2300      	movs	r3, #0
 8003552:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b22      	cmp	r3, #34	@ 0x22
 800355e:	f040 80aa 	bne.w	80036b6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800356a:	d115      	bne.n	8003598 <UART_Receive_IT+0x54>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d111      	bne.n	8003598 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003578:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	b29b      	uxth	r3, r3
 8003582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003586:	b29a      	uxth	r2, r3
 8003588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800358a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003590:	1c9a      	adds	r2, r3, #2
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	629a      	str	r2, [r3, #40]	@ 0x28
 8003596:	e024      	b.n	80035e2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035a6:	d007      	beq.n	80035b8 <UART_Receive_IT+0x74>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10a      	bne.n	80035c6 <UART_Receive_IT+0x82>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d106      	bne.n	80035c6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	b2da      	uxtb	r2, r3
 80035c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035c2:	701a      	strb	r2, [r3, #0]
 80035c4:	e008      	b.n	80035d8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035d2:	b2da      	uxtb	r2, r3
 80035d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035d6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035dc:	1c5a      	adds	r2, r3, #1
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	3b01      	subs	r3, #1
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	4619      	mov	r1, r3
 80035f0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d15d      	bne.n	80036b2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68da      	ldr	r2, [r3, #12]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0220 	bic.w	r2, r2, #32
 8003604:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68da      	ldr	r2, [r3, #12]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003614:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	695a      	ldr	r2, [r3, #20]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 0201 	bic.w	r2, r2, #1
 8003624:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2220      	movs	r2, #32
 800362a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003638:	2b01      	cmp	r3, #1
 800363a:	d135      	bne.n	80036a8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	330c      	adds	r3, #12
 8003648:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	e853 3f00 	ldrex	r3, [r3]
 8003650:	613b      	str	r3, [r7, #16]
   return(result);
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	f023 0310 	bic.w	r3, r3, #16
 8003658:	627b      	str	r3, [r7, #36]	@ 0x24
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	330c      	adds	r3, #12
 8003660:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003662:	623a      	str	r2, [r7, #32]
 8003664:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003666:	69f9      	ldr	r1, [r7, #28]
 8003668:	6a3a      	ldr	r2, [r7, #32]
 800366a:	e841 2300 	strex	r3, r2, [r1]
 800366e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1e5      	bne.n	8003642 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0310 	and.w	r3, r3, #16
 8003680:	2b10      	cmp	r3, #16
 8003682:	d10a      	bne.n	800369a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003684:	2300      	movs	r3, #0
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	60fb      	str	r3, [r7, #12]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	60fb      	str	r3, [r7, #12]
 8003698:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800369e:	4619      	mov	r1, r3
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f7ff fe67 	bl	8003374 <HAL_UARTEx_RxEventCallback>
 80036a6:	e002      	b.n	80036ae <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f7ff fe4f 	bl	800334c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80036ae:	2300      	movs	r3, #0
 80036b0:	e002      	b.n	80036b8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80036b2:	2300      	movs	r3, #0
 80036b4:	e000      	b.n	80036b8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80036b6:	2302      	movs	r3, #2
  }
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3730      	adds	r7, #48	@ 0x30
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036c4:	b0c0      	sub	sp, #256	@ 0x100
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80036d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036dc:	68d9      	ldr	r1, [r3, #12]
 80036de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	ea40 0301 	orr.w	r3, r0, r1
 80036e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	431a      	orrs	r2, r3
 80036f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	431a      	orrs	r2, r3
 8003700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	4313      	orrs	r3, r2
 8003708:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800370c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003718:	f021 010c 	bic.w	r1, r1, #12
 800371c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003726:	430b      	orrs	r3, r1
 8003728:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800372a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800373a:	6999      	ldr	r1, [r3, #24]
 800373c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	ea40 0301 	orr.w	r3, r0, r1
 8003746:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	4b8f      	ldr	r3, [pc, #572]	@ (800398c <UART_SetConfig+0x2cc>)
 8003750:	429a      	cmp	r2, r3
 8003752:	d005      	beq.n	8003760 <UART_SetConfig+0xa0>
 8003754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	4b8d      	ldr	r3, [pc, #564]	@ (8003990 <UART_SetConfig+0x2d0>)
 800375c:	429a      	cmp	r2, r3
 800375e:	d104      	bne.n	800376a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003760:	f7fe fcba 	bl	80020d8 <HAL_RCC_GetPCLK2Freq>
 8003764:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003768:	e003      	b.n	8003772 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800376a:	f7fe fca1 	bl	80020b0 <HAL_RCC_GetPCLK1Freq>
 800376e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003776:	69db      	ldr	r3, [r3, #28]
 8003778:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800377c:	f040 810c 	bne.w	8003998 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003780:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003784:	2200      	movs	r2, #0
 8003786:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800378a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800378e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003792:	4622      	mov	r2, r4
 8003794:	462b      	mov	r3, r5
 8003796:	1891      	adds	r1, r2, r2
 8003798:	65b9      	str	r1, [r7, #88]	@ 0x58
 800379a:	415b      	adcs	r3, r3
 800379c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800379e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80037a2:	4621      	mov	r1, r4
 80037a4:	eb12 0801 	adds.w	r8, r2, r1
 80037a8:	4629      	mov	r1, r5
 80037aa:	eb43 0901 	adc.w	r9, r3, r1
 80037ae:	f04f 0200 	mov.w	r2, #0
 80037b2:	f04f 0300 	mov.w	r3, #0
 80037b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037c2:	4690      	mov	r8, r2
 80037c4:	4699      	mov	r9, r3
 80037c6:	4623      	mov	r3, r4
 80037c8:	eb18 0303 	adds.w	r3, r8, r3
 80037cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80037d0:	462b      	mov	r3, r5
 80037d2:	eb49 0303 	adc.w	r3, r9, r3
 80037d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80037da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80037e6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80037ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80037ee:	460b      	mov	r3, r1
 80037f0:	18db      	adds	r3, r3, r3
 80037f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80037f4:	4613      	mov	r3, r2
 80037f6:	eb42 0303 	adc.w	r3, r2, r3
 80037fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80037fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003800:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003804:	f7fc fce8 	bl	80001d8 <__aeabi_uldivmod>
 8003808:	4602      	mov	r2, r0
 800380a:	460b      	mov	r3, r1
 800380c:	4b61      	ldr	r3, [pc, #388]	@ (8003994 <UART_SetConfig+0x2d4>)
 800380e:	fba3 2302 	umull	r2, r3, r3, r2
 8003812:	095b      	lsrs	r3, r3, #5
 8003814:	011c      	lsls	r4, r3, #4
 8003816:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800381a:	2200      	movs	r2, #0
 800381c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003820:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003824:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003828:	4642      	mov	r2, r8
 800382a:	464b      	mov	r3, r9
 800382c:	1891      	adds	r1, r2, r2
 800382e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003830:	415b      	adcs	r3, r3
 8003832:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003834:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003838:	4641      	mov	r1, r8
 800383a:	eb12 0a01 	adds.w	sl, r2, r1
 800383e:	4649      	mov	r1, r9
 8003840:	eb43 0b01 	adc.w	fp, r3, r1
 8003844:	f04f 0200 	mov.w	r2, #0
 8003848:	f04f 0300 	mov.w	r3, #0
 800384c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003850:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003854:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003858:	4692      	mov	sl, r2
 800385a:	469b      	mov	fp, r3
 800385c:	4643      	mov	r3, r8
 800385e:	eb1a 0303 	adds.w	r3, sl, r3
 8003862:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003866:	464b      	mov	r3, r9
 8003868:	eb4b 0303 	adc.w	r3, fp, r3
 800386c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800387c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003880:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003884:	460b      	mov	r3, r1
 8003886:	18db      	adds	r3, r3, r3
 8003888:	643b      	str	r3, [r7, #64]	@ 0x40
 800388a:	4613      	mov	r3, r2
 800388c:	eb42 0303 	adc.w	r3, r2, r3
 8003890:	647b      	str	r3, [r7, #68]	@ 0x44
 8003892:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003896:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800389a:	f7fc fc9d 	bl	80001d8 <__aeabi_uldivmod>
 800389e:	4602      	mov	r2, r0
 80038a0:	460b      	mov	r3, r1
 80038a2:	4611      	mov	r1, r2
 80038a4:	4b3b      	ldr	r3, [pc, #236]	@ (8003994 <UART_SetConfig+0x2d4>)
 80038a6:	fba3 2301 	umull	r2, r3, r3, r1
 80038aa:	095b      	lsrs	r3, r3, #5
 80038ac:	2264      	movs	r2, #100	@ 0x64
 80038ae:	fb02 f303 	mul.w	r3, r2, r3
 80038b2:	1acb      	subs	r3, r1, r3
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80038ba:	4b36      	ldr	r3, [pc, #216]	@ (8003994 <UART_SetConfig+0x2d4>)
 80038bc:	fba3 2302 	umull	r2, r3, r3, r2
 80038c0:	095b      	lsrs	r3, r3, #5
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80038c8:	441c      	add	r4, r3
 80038ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038ce:	2200      	movs	r2, #0
 80038d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038d4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80038d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80038dc:	4642      	mov	r2, r8
 80038de:	464b      	mov	r3, r9
 80038e0:	1891      	adds	r1, r2, r2
 80038e2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80038e4:	415b      	adcs	r3, r3
 80038e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80038ec:	4641      	mov	r1, r8
 80038ee:	1851      	adds	r1, r2, r1
 80038f0:	6339      	str	r1, [r7, #48]	@ 0x30
 80038f2:	4649      	mov	r1, r9
 80038f4:	414b      	adcs	r3, r1
 80038f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80038f8:	f04f 0200 	mov.w	r2, #0
 80038fc:	f04f 0300 	mov.w	r3, #0
 8003900:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003904:	4659      	mov	r1, fp
 8003906:	00cb      	lsls	r3, r1, #3
 8003908:	4651      	mov	r1, sl
 800390a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800390e:	4651      	mov	r1, sl
 8003910:	00ca      	lsls	r2, r1, #3
 8003912:	4610      	mov	r0, r2
 8003914:	4619      	mov	r1, r3
 8003916:	4603      	mov	r3, r0
 8003918:	4642      	mov	r2, r8
 800391a:	189b      	adds	r3, r3, r2
 800391c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003920:	464b      	mov	r3, r9
 8003922:	460a      	mov	r2, r1
 8003924:	eb42 0303 	adc.w	r3, r2, r3
 8003928:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800392c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003938:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800393c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003940:	460b      	mov	r3, r1
 8003942:	18db      	adds	r3, r3, r3
 8003944:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003946:	4613      	mov	r3, r2
 8003948:	eb42 0303 	adc.w	r3, r2, r3
 800394c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800394e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003952:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003956:	f7fc fc3f 	bl	80001d8 <__aeabi_uldivmod>
 800395a:	4602      	mov	r2, r0
 800395c:	460b      	mov	r3, r1
 800395e:	4b0d      	ldr	r3, [pc, #52]	@ (8003994 <UART_SetConfig+0x2d4>)
 8003960:	fba3 1302 	umull	r1, r3, r3, r2
 8003964:	095b      	lsrs	r3, r3, #5
 8003966:	2164      	movs	r1, #100	@ 0x64
 8003968:	fb01 f303 	mul.w	r3, r1, r3
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	3332      	adds	r3, #50	@ 0x32
 8003972:	4a08      	ldr	r2, [pc, #32]	@ (8003994 <UART_SetConfig+0x2d4>)
 8003974:	fba2 2303 	umull	r2, r3, r2, r3
 8003978:	095b      	lsrs	r3, r3, #5
 800397a:	f003 0207 	and.w	r2, r3, #7
 800397e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4422      	add	r2, r4
 8003986:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003988:	e106      	b.n	8003b98 <UART_SetConfig+0x4d8>
 800398a:	bf00      	nop
 800398c:	40011000 	.word	0x40011000
 8003990:	40011400 	.word	0x40011400
 8003994:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003998:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800399c:	2200      	movs	r2, #0
 800399e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80039a2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80039a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80039aa:	4642      	mov	r2, r8
 80039ac:	464b      	mov	r3, r9
 80039ae:	1891      	adds	r1, r2, r2
 80039b0:	6239      	str	r1, [r7, #32]
 80039b2:	415b      	adcs	r3, r3
 80039b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80039b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80039ba:	4641      	mov	r1, r8
 80039bc:	1854      	adds	r4, r2, r1
 80039be:	4649      	mov	r1, r9
 80039c0:	eb43 0501 	adc.w	r5, r3, r1
 80039c4:	f04f 0200 	mov.w	r2, #0
 80039c8:	f04f 0300 	mov.w	r3, #0
 80039cc:	00eb      	lsls	r3, r5, #3
 80039ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039d2:	00e2      	lsls	r2, r4, #3
 80039d4:	4614      	mov	r4, r2
 80039d6:	461d      	mov	r5, r3
 80039d8:	4643      	mov	r3, r8
 80039da:	18e3      	adds	r3, r4, r3
 80039dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80039e0:	464b      	mov	r3, r9
 80039e2:	eb45 0303 	adc.w	r3, r5, r3
 80039e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80039ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80039f6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80039fa:	f04f 0200 	mov.w	r2, #0
 80039fe:	f04f 0300 	mov.w	r3, #0
 8003a02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003a06:	4629      	mov	r1, r5
 8003a08:	008b      	lsls	r3, r1, #2
 8003a0a:	4621      	mov	r1, r4
 8003a0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a10:	4621      	mov	r1, r4
 8003a12:	008a      	lsls	r2, r1, #2
 8003a14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003a18:	f7fc fbde 	bl	80001d8 <__aeabi_uldivmod>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	460b      	mov	r3, r1
 8003a20:	4b60      	ldr	r3, [pc, #384]	@ (8003ba4 <UART_SetConfig+0x4e4>)
 8003a22:	fba3 2302 	umull	r2, r3, r3, r2
 8003a26:	095b      	lsrs	r3, r3, #5
 8003a28:	011c      	lsls	r4, r3, #4
 8003a2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a34:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003a38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003a3c:	4642      	mov	r2, r8
 8003a3e:	464b      	mov	r3, r9
 8003a40:	1891      	adds	r1, r2, r2
 8003a42:	61b9      	str	r1, [r7, #24]
 8003a44:	415b      	adcs	r3, r3
 8003a46:	61fb      	str	r3, [r7, #28]
 8003a48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a4c:	4641      	mov	r1, r8
 8003a4e:	1851      	adds	r1, r2, r1
 8003a50:	6139      	str	r1, [r7, #16]
 8003a52:	4649      	mov	r1, r9
 8003a54:	414b      	adcs	r3, r1
 8003a56:	617b      	str	r3, [r7, #20]
 8003a58:	f04f 0200 	mov.w	r2, #0
 8003a5c:	f04f 0300 	mov.w	r3, #0
 8003a60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a64:	4659      	mov	r1, fp
 8003a66:	00cb      	lsls	r3, r1, #3
 8003a68:	4651      	mov	r1, sl
 8003a6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a6e:	4651      	mov	r1, sl
 8003a70:	00ca      	lsls	r2, r1, #3
 8003a72:	4610      	mov	r0, r2
 8003a74:	4619      	mov	r1, r3
 8003a76:	4603      	mov	r3, r0
 8003a78:	4642      	mov	r2, r8
 8003a7a:	189b      	adds	r3, r3, r2
 8003a7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a80:	464b      	mov	r3, r9
 8003a82:	460a      	mov	r2, r1
 8003a84:	eb42 0303 	adc.w	r3, r2, r3
 8003a88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a96:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003a98:	f04f 0200 	mov.w	r2, #0
 8003a9c:	f04f 0300 	mov.w	r3, #0
 8003aa0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003aa4:	4649      	mov	r1, r9
 8003aa6:	008b      	lsls	r3, r1, #2
 8003aa8:	4641      	mov	r1, r8
 8003aaa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003aae:	4641      	mov	r1, r8
 8003ab0:	008a      	lsls	r2, r1, #2
 8003ab2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003ab6:	f7fc fb8f 	bl	80001d8 <__aeabi_uldivmod>
 8003aba:	4602      	mov	r2, r0
 8003abc:	460b      	mov	r3, r1
 8003abe:	4611      	mov	r1, r2
 8003ac0:	4b38      	ldr	r3, [pc, #224]	@ (8003ba4 <UART_SetConfig+0x4e4>)
 8003ac2:	fba3 2301 	umull	r2, r3, r3, r1
 8003ac6:	095b      	lsrs	r3, r3, #5
 8003ac8:	2264      	movs	r2, #100	@ 0x64
 8003aca:	fb02 f303 	mul.w	r3, r2, r3
 8003ace:	1acb      	subs	r3, r1, r3
 8003ad0:	011b      	lsls	r3, r3, #4
 8003ad2:	3332      	adds	r3, #50	@ 0x32
 8003ad4:	4a33      	ldr	r2, [pc, #204]	@ (8003ba4 <UART_SetConfig+0x4e4>)
 8003ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8003ada:	095b      	lsrs	r3, r3, #5
 8003adc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ae0:	441c      	add	r4, r3
 8003ae2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	673b      	str	r3, [r7, #112]	@ 0x70
 8003aea:	677a      	str	r2, [r7, #116]	@ 0x74
 8003aec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003af0:	4642      	mov	r2, r8
 8003af2:	464b      	mov	r3, r9
 8003af4:	1891      	adds	r1, r2, r2
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	415b      	adcs	r3, r3
 8003afa:	60fb      	str	r3, [r7, #12]
 8003afc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b00:	4641      	mov	r1, r8
 8003b02:	1851      	adds	r1, r2, r1
 8003b04:	6039      	str	r1, [r7, #0]
 8003b06:	4649      	mov	r1, r9
 8003b08:	414b      	adcs	r3, r1
 8003b0a:	607b      	str	r3, [r7, #4]
 8003b0c:	f04f 0200 	mov.w	r2, #0
 8003b10:	f04f 0300 	mov.w	r3, #0
 8003b14:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b18:	4659      	mov	r1, fp
 8003b1a:	00cb      	lsls	r3, r1, #3
 8003b1c:	4651      	mov	r1, sl
 8003b1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b22:	4651      	mov	r1, sl
 8003b24:	00ca      	lsls	r2, r1, #3
 8003b26:	4610      	mov	r0, r2
 8003b28:	4619      	mov	r1, r3
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	4642      	mov	r2, r8
 8003b2e:	189b      	adds	r3, r3, r2
 8003b30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b32:	464b      	mov	r3, r9
 8003b34:	460a      	mov	r2, r1
 8003b36:	eb42 0303 	adc.w	r3, r2, r3
 8003b3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b46:	667a      	str	r2, [r7, #100]	@ 0x64
 8003b48:	f04f 0200 	mov.w	r2, #0
 8003b4c:	f04f 0300 	mov.w	r3, #0
 8003b50:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003b54:	4649      	mov	r1, r9
 8003b56:	008b      	lsls	r3, r1, #2
 8003b58:	4641      	mov	r1, r8
 8003b5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b5e:	4641      	mov	r1, r8
 8003b60:	008a      	lsls	r2, r1, #2
 8003b62:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003b66:	f7fc fb37 	bl	80001d8 <__aeabi_uldivmod>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ba4 <UART_SetConfig+0x4e4>)
 8003b70:	fba3 1302 	umull	r1, r3, r3, r2
 8003b74:	095b      	lsrs	r3, r3, #5
 8003b76:	2164      	movs	r1, #100	@ 0x64
 8003b78:	fb01 f303 	mul.w	r3, r1, r3
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	011b      	lsls	r3, r3, #4
 8003b80:	3332      	adds	r3, #50	@ 0x32
 8003b82:	4a08      	ldr	r2, [pc, #32]	@ (8003ba4 <UART_SetConfig+0x4e4>)
 8003b84:	fba2 2303 	umull	r2, r3, r2, r3
 8003b88:	095b      	lsrs	r3, r3, #5
 8003b8a:	f003 020f 	and.w	r2, r3, #15
 8003b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4422      	add	r2, r4
 8003b96:	609a      	str	r2, [r3, #8]
}
 8003b98:	bf00      	nop
 8003b9a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ba4:	51eb851f 	.word	0x51eb851f

08003ba8 <memset>:
 8003ba8:	4402      	add	r2, r0
 8003baa:	4603      	mov	r3, r0
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d100      	bne.n	8003bb2 <memset+0xa>
 8003bb0:	4770      	bx	lr
 8003bb2:	f803 1b01 	strb.w	r1, [r3], #1
 8003bb6:	e7f9      	b.n	8003bac <memset+0x4>

08003bb8 <__libc_init_array>:
 8003bb8:	b570      	push	{r4, r5, r6, lr}
 8003bba:	4d0d      	ldr	r5, [pc, #52]	@ (8003bf0 <__libc_init_array+0x38>)
 8003bbc:	4c0d      	ldr	r4, [pc, #52]	@ (8003bf4 <__libc_init_array+0x3c>)
 8003bbe:	1b64      	subs	r4, r4, r5
 8003bc0:	10a4      	asrs	r4, r4, #2
 8003bc2:	2600      	movs	r6, #0
 8003bc4:	42a6      	cmp	r6, r4
 8003bc6:	d109      	bne.n	8003bdc <__libc_init_array+0x24>
 8003bc8:	4d0b      	ldr	r5, [pc, #44]	@ (8003bf8 <__libc_init_array+0x40>)
 8003bca:	4c0c      	ldr	r4, [pc, #48]	@ (8003bfc <__libc_init_array+0x44>)
 8003bcc:	f000 f818 	bl	8003c00 <_init>
 8003bd0:	1b64      	subs	r4, r4, r5
 8003bd2:	10a4      	asrs	r4, r4, #2
 8003bd4:	2600      	movs	r6, #0
 8003bd6:	42a6      	cmp	r6, r4
 8003bd8:	d105      	bne.n	8003be6 <__libc_init_array+0x2e>
 8003bda:	bd70      	pop	{r4, r5, r6, pc}
 8003bdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003be0:	4798      	blx	r3
 8003be2:	3601      	adds	r6, #1
 8003be4:	e7ee      	b.n	8003bc4 <__libc_init_array+0xc>
 8003be6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bea:	4798      	blx	r3
 8003bec:	3601      	adds	r6, #1
 8003bee:	e7f2      	b.n	8003bd6 <__libc_init_array+0x1e>
 8003bf0:	08003c38 	.word	0x08003c38
 8003bf4:	08003c38 	.word	0x08003c38
 8003bf8:	08003c38 	.word	0x08003c38
 8003bfc:	08003c3c 	.word	0x08003c3c

08003c00 <_init>:
 8003c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c02:	bf00      	nop
 8003c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c06:	bc08      	pop	{r3}
 8003c08:	469e      	mov	lr, r3
 8003c0a:	4770      	bx	lr

08003c0c <_fini>:
 8003c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c0e:	bf00      	nop
 8003c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c12:	bc08      	pop	{r3}
 8003c14:	469e      	mov	lr, r3
 8003c16:	4770      	bx	lr
